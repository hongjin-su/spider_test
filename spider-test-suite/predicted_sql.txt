SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT Name, Country, Age FROM singer ORDER BY Age DESC
SELECT Name, Country, Age FROM singer ORDER BY Age DESC
SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France'
SELECT AVG(Age) as Average_Age, MIN(Age) as Minimum_Age, MAX(Age) as Maximum_Age FROM singer WHERE Country = 'France'
SELECT Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer)
SELECT Song_Name, Song_release_year FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID WHERE Age = (SELECT MIN(Age) FROM singer)
SELECT DISTINCT Country FROM singer WHERE Age > 20
SELECT Country FROM singer WHERE Age > 20 GROUP BY Country
SELECT      Country,      COUNT(Singer_ID) as Number_of_Singers  FROM      singer  GROUP BY      Country
SELECT Country, COUNT(Singer_ID) as Number_of_Singers  FROM singer GROUP BY Country ORDER BY Number_of_Singers DESC
SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)
SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000
SELECT Location, Name  FROM stadium  WHERE Capacity BETWEEN 5000 AND 10000
SELECT MAX(Capacity) as Maximum_Capacity, AVG(Average) as Average_Capacity FROM stadium
SELECT AVG(Capacity) as Average_Capacity, MAX(Capacity) as Maximum_Capacity FROM stadium
SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium)
SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium)
SELECT COUNT(*)  FROM concert WHERE Year='2014' OR Year='2015'
SELECT COUNT(*) FROM concert WHERE Year = '2014' OR Year = '2015'
SELECT s.Name, COUNT(c.concert_ID) as Number_of_Concerts FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Name ORDER BY Number_of_Concerts DESC
SELECT stadium.Name, COUNT(*) as Total_Concerts FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name
SELECT stadium.Name, stadium.Capacity, count(concert.concert_ID) as Total_Concerts FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year >= '2014' GROUP BY stadium.Name, stadium.Capacity ORDER BY Total_Concerts DESC LIMIT 1
SELECT s.Name, s.Capacity  FROM stadium s  JOIN concert c ON s.Stadium_ID = c.Stadium_ID  WHERE c.Year > 2013  GROUP BY s.Name, s.Capacity  ORDER BY COUNT(c.concert_ID) DESC  LIMIT 1
SELECT Year, COUNT(concert_ID) as Number_of_Concerts FROM concert GROUP BY Year ORDER BY Number_of_Concerts DESC LIMIT 1
SELECT Year, COUNT(Year) as Total_Concerts FROM concert GROUP BY Year ORDER BY Total_Concerts DESC LIMIT 1
SELECT s.Name FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Stadium_ID IS NULL
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)
SELECT DISTINCT Country FROM singer WHERE (Age > 40 OR Age < 30)
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = '2014')
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (   SELECT Stadium_ID   FROM concert   WHERE Year = '2014' )
SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) as Number_of_Singers FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID, concert.concert_Name, concert.Theme
SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) as Number_of_Singers FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID
SELECT singer.Name, COUNT(singer_in_concert.Singer_ID) as Number_of_Concerts FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name ORDER BY Number_of_Concerts DESC
SELECT      singer.Name,      COUNT(singer_in_concert.Singer_ID) AS Number_of_Concerts FROM      singer     INNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY      singer.Name
SELECT singer.Name  FROM singer  INNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  INNER JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID  WHERE concert.Year = '2014'
SELECT singer.Name  FROM singer  JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID  WHERE concert.Year = '2014'
SELECT singer.Name, singer.Country FROM singer  JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID  WHERE singer.Song_Name LIKE '%Hey%'
SELECT Singer.Name, Singer.Country FROM Singer JOIN singer_in_concert ON Singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE Song_Name LIKE '%Hey%'
SELECT stadium.Name, stadium.Location FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year IN ('2014', '2015') GROUP BY stadium.Name, stadium.Location HAVING COUNT(DISTINCT concert.Year) = 2
SELECT DISTINCT s.Name, s.Location FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year IN ('2014', '2015') GROUP BY s.Name, s.Location HAVING COUNT(DISTINCT c.Year) = 2
SELECT COUNT(*) FROM concert c JOIN stadium s ON c.Stadium_ID = s.Stadium_ID WHERE s.Capacity = (SELECT MAX(Capacity) FROM stadium)
SELECT COUNT(*) FROM concert c JOIN stadium s ON c.Stadium_ID = s.Stadium_ID WHERE s.Capacity = (SELECT MAX(Capacity) FROM stadium)
SELECT COUNT(*) FROM Pets WHERE weight > 10
SELECT COUNT(*) FROM Pets WHERE weight > 10
SELECT MIN(weight) FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog')
SELECT weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age LIMIT 1
SELECT PetType, MAX(weight) as max_weight FROM Pets GROUP BY PetType ORDER BY max_weight DESC
SELECT PetType, MAX(weight), PetType FROM Pets GROUP BY PetType
SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Age > 20;
SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20
SELECT COUNT(*)  FROM Student  JOIN Has_Pet  ON Student.StuID = Has_Pet.StuID  JOIN Pets  ON Has_Pet.PetID = Pets.PetID  WHERE Student.Sex = 'F' AND Pets.PetType = 'dog'
SELECT COUNT(*) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Sex = 'F' AND Pets.PetType = 'dog'
SELECT COUNT(DISTINCT PetType) FROM Pets
SELECT COUNT(DISTINCT PetType) FROM Pets
SELECT Fname FROM Student WHERE StuID IN (SELECT StuID                 FROM Has_Pet                 WHERE PetID IN (SELECT PetID                                 FROM Pets                                 WHERE PetType IN ('cat', 'dog')));
SELECT Student.Fname  FROM Student  JOIN Has_Pet  ON Student.StuID = Has_Pet.StuID  JOIN Pets  ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType IN ('cat', 'dog')
SELECT Student.Fname FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' OR Pets.PetType = 'dog' GROUP BY Student.StuID HAVING COUNT(DISTINCT Pets.PetType) = 2
SELECT Fname  FROM Student  WHERE StuID IN (     SELECT StuID      FROM Has_Pet      WHERE PetID IN (         SELECT PetID          FROM Pets          WHERE PetType = 'Cat'     )      INTERSECT      SELECT StuID     FROM Has_Pet      WHERE PetID IN (         SELECT PetID          FROM Pets          WHERE PetType = 'Dog'     ) )
SELECT Major, Age FROM Student WHERE StuID NOT IN (   SELECT StuID   FROM Has_Pet   WHERE PetID IN (     SELECT PetID     FROM Pets     WHERE PetType = 'cat'   ) )
SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN (SELECT StuID                             FROM Has_Pet                             JOIN Pets ON Has_Pet.PetID = Pets.PetID                             WHERE Pets.PetType = 'cat')
SELECT StuID FROM Student WHERE StuID NOT IN (   SELECT StuID   FROM Has_Pet   INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE PetType = 'cat' )
SELECT StuID FROM Student WHERE StuID NOT IN (   SELECT StuID   FROM Has_Pet   JOIN Pets   ON Has_Pet.PetID = Pets.PetID   WHERE PetType = 'Cat' )
SELECT Fname, Age FROM Student WHERE StuID IN (   SELECT StuID   FROM Has_Pet   WHERE PetID IN (     SELECT PetID     FROM Pets     WHERE PetType = 'dog'   )   AND StuID NOT IN (     SELECT StuID     FROM Has_Pet     WHERE PetID IN (       SELECT PetID       FROM Pets       WHERE PetType = 'cat'     )   ) )
SELECT Fname FROM Student WHERE StuID IN (   SELECT StuID FROM Has_Pet   WHERE PetID IN (     SELECT PetID FROM Pets     WHERE PetType = 'dog'   )   AND StuID NOT IN (     SELECT StuID FROM Has_Pet     WHERE PetID IN (       SELECT PetID FROM Pets       WHERE PetType = 'cat'     )   ) )
SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)
SELECT PetType, MIN(pet_age), weight FROM Pets ORDER BY pet_age LIMIT 1
SELECT PetID, weight FROM Pets WHERE pet_age > 1
SELECT PetID, weight FROM Pets WHERE pet_age > 1
SELECT PetType, AVG(pet_age) as avg_age, MAX(pet_age) as max_age FROM Pets GROUP BY PetType
SELECT PetType, AVG(pet_age) AS Average_Age, MAX(pet_age) AS Maximum_Age FROM Pets GROUP BY PetType
SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType
SELECT AVG(weight) as avg_weight, PetType FROM Pets GROUP BY PetType
SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet)
SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID                 FROM Has_Pet)
SELECT PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE LName = 'Smith'
SELECT Pets.PetID  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Student.LName = 'Smith'
SELECT StuID, COUNT(PetID) as Number_of_Pets FROM Has_Pet GROUP BY StuID
SELECT StuID, COUNT(PetID) as Number_of_Pets FROM Has_Pet GROUP BY StuID
SELECT S.FName, S.Sex FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID GROUP BY S.StuID, S.FName, S.Sex HAVING COUNT(HP.PetID) > 1
SELECT Student.FName, Student.Sex FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID HAVING COUNT(Has_Pet.PetID) > 1
SELECT LName  FROM Student  WHERE StuID IN (SELECT StuID                  FROM Has_Pet                  WHERE PetID IN (SELECT PetID                                  FROM Pets                                  WHERE PetType = 'cat'                                  AND pet_age = 3));
SELECT LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT COUNT(*) FROM continents;
SELECT COUNT(*) FROM continents;
SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) as NumberOfCountries FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent ORDER BY NumberOfCountries DESC
SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) as CountryCount FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent ORDER BY CountryCount DESC
SELECT COUNT(*)  FROM countries
SELECT COUNT(*) FROM countries
SELECT car_makers.FullName, car_makers.Id, COUNT(model_list.Model) as NumberOfModels FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName, car_makers.Id ORDER BY NumberOfModels DESC
SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.Maker) as Number_of_Models FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName ORDER BY car_makers.Id
SELECT Model, MIN(Horsepower) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId GROUP BY Model ORDER BY MIN(Horsepower) ASC LIMIT 1
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model ORDER BY cars_data.Horsepower LIMIT 1
SELECT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data)
SELECT * FROM cars_data WHERE Weight < (SELECT AVG(Weight) FROM cars_data)
SELECT car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970 GROUP BY car_makers.Maker
SELECT DISTINCT cn.Make, cm.FullName  FROM cars_data cd  JOIN car_names cn ON cd.Id = cn.MakeId  JOIN car_makers cm ON cn.Make = cm.Maker  WHERE cd.Year = 1970  ORDER BY cm.FullName
SELECT Make, MIN(Year) as EarliestYear FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId GROUP BY Make ORDER BY EarliestYear ASC LIMIT 1
SELECT car_makers.Maker, MIN(cars_data.Year) as Year FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY car_makers.Maker ORDER BY Year LIMIT 1
SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Year > 1980
SELECT DISTINCT car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE Year > 1980
SELECT continents.Continent, COUNT(car_makers.Id) FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.Continent
SELECT continents.Continent, COUNT(car_makers.Id) as car_makers_count  FROM continents  LEFT JOIN countries ON continents.ContId = countries.Continent  LEFT JOIN car_makers ON countries.CountryId = car_makers.Country  GROUP BY continents.Continent  ORDER BY car_makers_count DESC
SELECT countries.CountryName, COUNT(car_makers.Id) AS TotalCarMakers FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName ORDER BY TotalCarMakers DESC LIMIT 1
SELECT countries.CountryName, COUNT(car_makers.Id) as TotalMakers FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName ORDER BY TotalMakers DESC LIMIT 1
SELECT car_makers.FullName, COUNT(model_list.ModelId) as ModelCount FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName
SELECT car_makers.Maker, COUNT(model_list.Model) as "Number of Models", car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Maker, car_makers.FullName, car_makers.Id
SELECT Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Make = 'AMC Hornet Sportabout (sw)'
SELECT Accelerate FROM cars_data WHERE Id = (SELECT MakeId FROM car_names WHERE Make = 'amc' AND Model = 'hornet sportabout (sw)')
SELECT COUNT(*) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France')
SELECT COUNT(DISTINCT car_makers.Maker) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France'
SELECT COUNT(model_list.Model) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'USA'
SELECT COUNT(model_list.ModelId) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'United States'
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4
SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974
SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974
SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker ORDER BY car_makers.Maker, model_list.Model
SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker
SELECT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName HAVING COUNT(car_makers.Id) > 0;
SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId
SELECT COUNT(*) FROM cars_data WHERE horsepower > 150
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150
SELECT Year, AVG(Weight) as Average_Weight FROM cars_data GROUP BY Year
SELECT Year, AVG(Weight), AVG(Year) FROM cars_data GROUP BY Year
SELECT countries.CountryName, COUNT(car_makers.Id) as car_manufacturers_count FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN continents ON countries.Continent = continents.ContId WHERE continents.Continent = 'Europe' GROUP BY countries.CountryName HAVING car_manufacturers_count >= 3
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName HAVING COUNT(car_makers.Maker) >= 3
SELECT car_names.Make, MAX(cars_data.Horsepower) as Max_Horsepower FROM cars_data INNER JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Cylinders = 3 GROUP BY car_names.Make
SELECT car_names.Make, cars_data.Horsepower FROM cars_data INNER JOIN car_names ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders = 3 ORDER BY cars_data.Horsepower DESC LIMIT 1
SELECT Model, MAX(MPG) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId GROUP BY Model ORDER BY MAX(MPG) DESC LIMIT 1
SELECT Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.MPG = (SELECT MAX(MPG) FROM cars_data)
SELECT AVG(CAST(Horsepower as INTEGER)) FROM cars_data WHERE Year < 1980
SELECT AVG(CAST(horsepower AS INTEGER)) FROM cars_data WHERE Year < 1980
SELECT AVG(edispl) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT ModelId FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Maker = 'Volvo')))
SELECT AVG(edispl)  FROM cars_data  WHERE Id IN (SELECT MakeId                  FROM car_names                  WHERE Model IN (SELECT ModelId                                  FROM model_list                                  WHERE Maker IN (SELECT Id                                                  FROM car_makers                                                  WHERE Maker = 'Volvo')))
SELECT Cylinders, MAX(Accelerate) FROM cars_data GROUP BY Cylinders ORDER BY Cylinders
SELECT Cylinders, MAX(Accelerate) FROM cars_data GROUP BY Cylinders
SELECT Model, COUNT(Make) AS VersionCount FROM car_names GROUP BY Model ORDER BY VersionCount DESC LIMIT 1
SELECT model_list.Model, COUNT(DISTINCT car_names.Make)  FROM model_list  JOIN car_names ON model_list.Model = car_names.Model  GROUP BY model_list.Model  ORDER BY COUNT(DISTINCT car_names.Make) DESC  LIMIT 1
SELECT COUNT(*)  FROM cars_data  WHERE Cylinders > 4
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4
SELECT COUNT(*) FROM cars_data WHERE Year = 1980
SELECT COUNT(*) FROM cars_data WHERE Year = 1980
SELECT COUNT(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.FullName = 'American Motor Company'
SELECT COUNT(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.Maker = 'American Motor Company'
SELECT car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(model_list.Model) > 3
SELECT car_makers.Maker, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Maker, car_makers.Id HAVING COUNT(model_list.Model) > 3
SELECT Model FROM model_list WHERE Maker IN (   SELECT Id    FROM car_makers    WHERE FullName = 'General Motors' ) OR Model IN (   SELECT Model    FROM car_names    WHERE MakeId IN (     SELECT Id      FROM cars_data      WHERE Weight > 3500   ) )
SELECT model_list.Model FROM model_list JOIN car_makers ON car_makers.Id = model_list.Maker JOIN car_names ON car_names.Model = model_list.Model JOIN cars_data ON cars_data.Id = car_names.MakeId WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500 GROUP BY model_list.Model
SELECT Year FROM cars_data WHERE Weight BETWEEN 3000 AND 4000;
SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 OR Weight > 3000
SELECT horsepower  FROM cars_data  WHERE accelerate = (SELECT MAX(accelerate) FROM cars_data)
SELECT horsepower  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  WHERE cars_data.Accelerate = (SELECT MAX(Accelerate) FROM cars_data)
SELECT Cylinders FROM cars_data WHERE Id IN (   SELECT MakeId   FROM car_names   WHERE Model IN (     SELECT Model     FROM model_list     WHERE Maker IN (       SELECT Id       FROM car_makers       WHERE Maker = 'volvo'     )   ) ) ORDER BY Accelerate LIMIT 1
SELECT Cylinders FROM cars_data WHERE Id IN (   SELECT MakeId   FROM car_names   WHERE Make = 'Volvo' AND Model IN (     SELECT Model     FROM model_list     WHERE Maker IN (       SELECT Id       FROM car_makers       WHERE Maker = 'Volvo'     )   ) ) ORDER BY Accelerate LIMIT 1
SELECT COUNT(*) FROM cars_data c1 WHERE c1.Accelerate > (   SELECT MAX(c2.Accelerate)   FROM cars_data c2   WHERE c2.Horsepower = (     SELECT MAX(c3.Horsepower)     FROM cars_data c3   ) );
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Accelerate) FROM cars_data WHERE Horsepower = (SELECT MAX(Horsepower) FROM cars_data))
SELECT COUNT(*) FROM (   SELECT Country, COUNT(*) as cnt   FROM car_makers   GROUP BY Country ) t WHERE cnt > 2
SELECT COUNT(*) FROM (  SELECT Country, COUNT(*) AS cnt  FROM car_makers  GROUP BY Country  HAVING cnt > 2 ) t
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6
SELECT model_list.Model, MAX(cars_data.Horsepower) FROM model_list JOIN cars_data ON model_list.ModelId = cars_data.Id WHERE cars_data.Cylinders = 4 GROUP BY model_list.Model ORDER BY MAX(cars_data.Horsepower) DESC LIMIT 1;
SELECT model_list.Model, MAX(cars_data.Horsepower) FROM model_list JOIN cars_data ON model_list.ModelId = cars_data.Id WHERE cars_data.Cylinders = 4 GROUP BY model_list.Model ORDER BY MAX(cars_data.Horsepower) DESC LIMIT 1
SELECT MakeId, Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND Cylinders <= 3
SELECT MakeId, Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE Horsepower != 'min' AND Cylinders < 4
SELECT MAX(MPG) FROM cars_data WHERE (Cylinders = 8 OR Year < 1980)
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980
SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Weight < 3500 AND FullName != 'Ford Motor Company'
SELECT Model FROM model_list WHERE Maker NOT IN (SELECT Id FROM car_makers WHERE Maker = 'Ford') AND ModelId IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT Model FROM model_list))
SELECT countries.CountryName FROM countries LEFT JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Id IS NULL
SELECT countries.CountryName FROM countries LEFT JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Id IS NULL
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON model_list.Maker = car_makers.Id GROUP BY car_makers.Maker HAVING COUNT(model_list.Model) >= 2 LIMIT 3
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON model_list.Maker = car_makers.Id JOIN car_names ON car_names.Model = model_list.Model GROUP BY car_makers.Maker HAVING COUNT(DISTINCT model_list.Model) >= 2 AND COUNT(car_names.Make) > 3
SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker WHERE ( ( SELECT COUNT(*) FROM car_makers WHERE car_makers.Country = countries.CountryId ) > 3 OR model_list.Model = 'fiat' ) GROUP BY countries.CountryId, countries.CountryName
SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker WHERE (   (SELECT COUNT(*) FROM car_makers WHERE Country = countries.CountryId) > 3   OR model_list.Model = 'Fiat' ) GROUP BY countries.CountryId, countries.CountryName
SELECT Country FROM airlines WHERE Airline = "JetBlue Airways"
SELECT Country FROM airlines WHERE Abbreviation = 'B6'
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'
SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways'
SELECT Airline, Abbreviation FROM airlines WHERE Country = "USA"
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'
SELECT COUNT(*) FROM airlines;
SELECT COUNT(*) FROM airlines
SELECT COUNT(*)  FROM airports
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM flights;
SELECT COUNT(*) FROM flights;
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'
SELECT COUNT(*) FROM airlines WHERE Country = 'USA'
SELECT COUNT(*) FROM airlines WHERE Country = 'USA'
SELECT City, Country FROM airports WHERE AirportCode = 'Alton'
SELECT City, Country FROM airports WHERE AirportName = 'Alton'
SELECT AirportName  FROM airports  WHERE AirportCode = 'AKO'
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'
SELECT AirportName FROM airports WHERE City = 'Aberdeen'
SELECT AirportName  FROM airports  WHERE City = 'Aberdeen'
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'
SELECT COUNT(*)  FROM flights  WHERE SourceAirport IN (SELECT AirportCode                         FROM airports                         WHERE City = 'Aberdeen');
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen'
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ABZ'
SELECT COUNT(*)  FROM flights  WHERE DestAirport = 'ABZ'
SELECT COUNT(*)  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  JOIN airports as dest_airports ON flights.DestAirport = dest_airports.AirportCode  WHERE airports.City = 'Aberdeen' AND dest_airports.City = 'Ashley'
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley'
SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'JetBlue Airways'
SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Abbreviation = 'JBL')
SELECT COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON airports.AirportCode = flights.DestAirport WHERE airlines.Airline = 'United Airlines' AND airports.AirportCode = 'ASY'
SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Abbreviation = 'UA') AND DestAirport = 'ASY'
SELECT COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.AirportCode = 'AHD'
SELECT COUNT(*)  FROM flights f JOIN airlines a ON f.Airline = a.uid  JOIN airports ap ON f.SourceAirport = ap.AirportCode WHERE a.Abbreviation = 'UA'  AND ap.AirportCode = 'AHD'
SELECT COUNT(*) FROM flights INNER JOIN airlines ON flights.Airline = airlines.uid INNER JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airlines.Abbreviation = 'United Airlines' AND airports.City = 'Aberdeen'
SELECT COUNT(*) FROM flights  JOIN airlines ON flights.Airline = airlines.uid  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airlines.Abbreviation = 'UA' AND airports.City = 'Aberdeen'
SELECT a.City, COUNT(f.DestAirport) as ArrivingFlights FROM airports a JOIN flights f ON a.AirportCode = f.DestAirport GROUP BY a.City ORDER BY ArrivingFlights DESC LIMIT 1
SELECT City, COUNT(DestAirport) as frequency FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY City ORDER BY frequency DESC LIMIT 1
SELECT airports.City, COUNT(flights.SourceAirport) as Departing_Flights FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.City ORDER BY Departing_Flights DESC LIMIT 1
SELECT City, COUNT(*) as frequency FROM airports  JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY City ORDER BY frequency DESC LIMIT 1
SELECT SourceAirport, COUNT(*) as TotalFlights FROM flights GROUP BY SourceAirport ORDER BY TotalFlights DESC LIMIT 1
SELECT SourceAirport, DestAirport, COUNT(*) as flight_count FROM flights GROUP BY SourceAirport, DestAirport ORDER BY flight_count DESC LIMIT 1
SELECT SourceAirport, COUNT(*) as TotalFlights FROM flights GROUP BY SourceAirport ORDER BY TotalFlights LIMIT 1;
SELECT airports.AirportCode, COUNT(flights.SourceAirport) as flight_count FROM airports LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.AirportCode ORDER BY flight_count LIMIT 1
SELECT airlines.Airline, COUNT(flights.FlightNo) AS TotalFlights FROM airlines  JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline ORDER BY TotalFlights DESC LIMIT 1
SELECT airlines.Airline, COUNT(flights.FlightNo) as TotalFlights FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline ORDER BY TotalFlights DESC LIMIT 1;
SELECT a.Abbreviation, a.Country FROM airlines a JOIN (   SELECT Airline, COUNT(*) as flight_count   FROM flights   GROUP BY Airline   ORDER BY flight_count   LIMIT 1 ) f ON a.uid = f.Airline
SELECT Abbreviation, Country FROM airlines WHERE uid = (   SELECT Airline   FROM flights   GROUP BY Airline   ORDER BY COUNT(*)   LIMIT 1 )
SELECT Airline.Airline FROM airlines Airline JOIN flights Flight ON Airline.uid = Flight.Airline JOIN airports Source ON Source.AirportCode = Flight.SourceAirport WHERE Source.AirportCode = 'AHD'
SELECT airlines.Airline FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline WHERE SourceAirport = 'AHD'
SELECT airlines.Airline FROM airlines  INNER JOIN flights  ON airlines.uid = flights.Airline  WHERE flights.DestAirport = 'AHD'
SELECT airlines.Airline FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline WHERE flights.DestAirport = 'AHD'
SELECT DISTINCT a.Airline FROM airlines a INNER JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'APG' OR f.DestAirport = 'APG' INTERSECT SELECT DISTINCT a.Airline FROM airlines a INNER JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'CVO' OR f.DestAirport = 'CVO'
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode IN ('APG', 'CVO') GROUP BY airlines.Airline HAVING COUNT(DISTINCT airports.AirportCode) = 2;
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'CVO' AND flights.Airline NOT IN ( SELECT airlines.uid FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'APG' )
SELECT DISTINCT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports AS source_airports ON flights.SourceAirport = source_airports.AirportCode JOIN airports AS dest_airports ON flights.DestAirport = dest_airports.AirportCode WHERE source_airports.City = 'CVO' AND dest_airports.City != 'APG'
SELECT a.Airline, COUNT(*) as flight_count FROM airlines a JOIN flights f ON a.uid = f.Airline GROUP BY a.Airline HAVING flight_count >= 10
SELECT airlines.Airline, COUNT(*) as TotalFlights FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline HAVING TotalFlights >= 10 ORDER BY TotalFlights DESC
SELECT airlines.Airline, count(*) as TotalFlights FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline HAVING TotalFlights < 200
SELECT airlines.Airline, count(*) as TotalFlights  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  GROUP BY airlines.Airline  HAVING TotalFlights < 200
SELECT FlightNo  FROM flights  WHERE Airline = (SELECT uid FROM airlines WHERE Airline = "United Airlines")
SELECT FlightNo FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Abbreviation = 'UA')
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'
SELECT FlightNo FROM flights WHERE DestAirport = 'APG'
SELECT FlightNo FROM flights WHERE DestAirport = 'APG'
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
SELECT FlightNo FROM flights WHERE SourceAirport='Aberdeen'
SELECT FlightNo FROM flights WHERE DestAirport = (   SELECT AirportCode   FROM airports   WHERE City = 'Aberdeen' )
SELECT FlightNo FROM flights WHERE DestAirport = 'ABZ'
SELECT COUNT(*) FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City IN ('Aberdeen', 'Abilene'))
SELECT COUNT(*) FROM flights WHERE DestAirport='Aberdeen' OR DestAirport='Abilene'
SELECT AirportName  FROM airports  WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights)  AND AirportCode NOT IN (SELECT DestAirport FROM flights)
SELECT airports.AirportCode  FROM airports  LEFT JOIN flights  ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport  WHERE flights.SourceAirport IS NULL AND flights.DestAirport IS NULL  GROUP BY airports.AirportCode
SELECT COUNT(*) FROM employee
SELECT COUNT(*) FROM employee;
SELECT Name FROM employee ORDER BY Age ASC
SELECT Name, Age FROM employee ORDER BY Age ASC
SELECT City, COUNT(*) as Number_of_employees FROM employee GROUP BY City
SELECT City, COUNT(*) as Employee_Count FROM employee GROUP BY City
SELECT City, COUNT(*) FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1
SELECT City, COUNT(Employee_ID) FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(Employee_ID) > 1
SELECT Location, COUNT(Shop_ID) as Number_of_Shops FROM shop GROUP BY Location
SELECT Location, COUNT(Shop_ID) as Number_of_shops FROM shop GROUP BY Location ORDER BY Number_of_shops DESC
SELECT Manager_name, District FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop)
SELECT Manager_name, District FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop)
SELECT MIN(Number_products) as Minimum_Number_of_Products, MAX(Number_products) as Maximum_Number_of_Products FROM shop
SELECT MIN(Number_products) as Min_Products, MAX(Number_products) as Max_Products FROM shop
SELECT Name, Location, District  FROM shop  ORDER BY Number_products DESC
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC
SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)
SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)
SELECT employee.Name, COUNT(evaluation.Year_awarded) as awarded_count FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID GROUP BY employee.Name ORDER BY awarded_count DESC LIMIT 1;
SELECT e.Name, COUNT(ev.Year_awarded) AS Awards_Received FROM employee e JOIN evaluation ev ON ev.Employee_ID = e.Employee_ID GROUP BY e.Name ORDER BY Awards_Received DESC LIMIT 1
SELECT Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID WHERE Bonus = (SELECT MAX(Bonus) FROM evaluation)
SELECT Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY Bonus DESC LIMIT 1
SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
SELECT Name FROM employee WHERE Employee_ID NOT IN (   SELECT Employee_ID   FROM evaluation );
SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1
SELECT shop.Name, COUNT(hiring.Employee_ID) as Total_Employees FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name ORDER BY Total_Employees DESC LIMIT 1;
SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Shop_ID IS NULL
SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL
SELECT shop.Name, COUNT(hiring.Employee_ID) as Number_of_employees FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name
SELECT shop.Name, count(hiring.Employee_ID) as Number_of_employees FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name ORDER BY Number_of_employees DESC
SELECT SUM(Bonus) as Total_Bonus FROM evaluation
SELECT SUM(bonus) as Total_bonus FROM evaluation
SELECT * FROM hiring
SELECT * FROM hiring
SELECT District FROM shop GROUP BY District HAVING MIN(Number_products) < 3000 AND MAX(Number_products) > 10000;
SELECT District  FROM shop WHERE (Number_products < 3000 OR Number_products > 10000) GROUP BY District HAVING COUNT(CASE WHEN Number_products < 3000 THEN 1 END) > 0 AND COUNT(CASE WHEN Number_products > 10000 THEN 1 END) > 0
SELECT COUNT(DISTINCT Location) FROM shop;
SELECT COUNT(DISTINCT Location) FROM shop;
SELECT COUNT(*) FROM Documents
SELECT COUNT(Document_ID) FROM Documents
SELECT Document_ID, Document_Name, Document_Description FROM Documents
SELECT Document_ID, Document_Name, Document_Description FROM Documents
SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'
SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'
SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'
SELECT Documents.Document_ID, Templates.Template_ID, Documents.Document_Description  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID  WHERE Documents.Document_Name = 'Robbin CV'
SELECT COUNT(DISTINCT Templates.Template_ID) FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID
SELECT COUNT(DISTINCT Template_ID) FROM Documents
SELECT COUNT(*) FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'PPT'
SELECT COUNT(*) FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code WHERE rtt.Template_Type_Code = 'PPT'
SELECT Templates.Template_ID, COUNT(Documents.Document_ID) as Number_of_Documents FROM Templates  LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID ORDER BY Templates.Template_ID
SELECT Templates.Template_ID, COUNT(*) as Count FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID
SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID, Templates.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID, Templates.Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1
SELECT Template_ID FROM Templates WHERE Template_ID IN (   SELECT Template_ID   FROM Documents   GROUP BY Template_ID   HAVING COUNT(*) > 1 )
SELECT Template_ID FROM Templates WHERE Template_ID IN (   SELECT Template_ID   FROM Documents   GROUP BY Template_ID   HAVING COUNT(Document_ID) > 1 )
SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents)
SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents)
SELECT COUNT(*) FROM Templates
SELECT COUNT(Template_ID) FROM Templates
SELECT    Templates.Template_ID,    Templates.Version_Number,    Templates.Template_Type_Code  FROM    Templates
SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates
SELECT DISTINCT Template_Type_Code FROM Templates ORDER BY Template_Type_Code
SELECT Template_Type_Code FROM Ref_Template_Types;
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT')
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT')
SELECT COUNT(*)  FROM Templates  WHERE Template_Type_Code = 'CV'
SELECT COUNT(*) FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'CV'
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5
SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5
SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) as Number_of_Templates FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code
SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code
SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) AS Template_Count FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code ORDER BY Template_Count DESC LIMIT 1
SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_Type_Code) FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code ORDER BY COUNT(Templates.Template_Type_Code) DESC LIMIT 1
SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code HAVING COUNT(Templates.Template_ID) < 3
SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code HAVING COUNT(Templates.Template_ID) < 3
SELECT MIN(Version_Number), Template_Type_Code FROM Templates GROUP BY Template_Type_Code
SELECT MIN(Version_Number), Template_Type_Code FROM Templates GROUP BY Template_Type_Code
SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = 'Data base'
SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types INNER JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = 'Data base'
SELECT Documents.Document_Name  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID  WHERE Templates.Template_Type_Code = 'BK'
SELECT Document_Name  FROM Documents  WHERE Template_ID IN (SELECT Template_ID                        FROM Templates                        WHERE Template_Type_Code = 'BK')
SELECT Ref_Template_Types.Template_Type_Code, COUNT(Documents.Document_ID) AS Number_of_Documents FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code
SELECT Ref_Template_Types.Template_Type_Code, COUNT(Documents.Document_ID) FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code
SELECT Ref_Template_Types.Template_Type_Code, COUNT(*) FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_ID IS NULL
SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_ID IS NULL
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types
SELECT Template_Type_Description  FROM Ref_Template_Types  WHERE Template_Type_Code = 'AD'
SELECT Template_Type_Description  FROM Ref_Template_Types  WHERE Template_Type_Code = 'AD'
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'
SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types INNER JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID
SELECT DISTINCT Templates.Template_Details  FROM Templates  INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation'
SELECT Template_ID  FROM Templates  WHERE Template_Details = 'Presentation'
SELECT COUNT(*) FROM Paragraphs
SELECT COUNT(*) FROM Paragraphs
SELECT COUNT(Paragraph_ID) FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Document_Name = 'Summer Show'
SELECT COUNT(*) FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Summer Show'
SELECT * FROM Paragraphs WHERE Paragraph_Text = 'Korea '
SELECT *  FROM Paragraphs  WHERE Paragraph_Text LIKE '%Korea%'
SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Welcome to NY'
SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Welcome to NY'
SELECT Paragraphs.Paragraph_Text  FROM Paragraphs  JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID  WHERE Documents.Document_Name = 'Customer reviews'
SELECT Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Customer reviews'
SELECT Document_ID, COUNT(Paragraph_ID) AS Number_Of_Paragraphs FROM Paragraphs GROUP BY Document_ID ORDER BY Document_ID
SELECT Document_ID, COUNT(Paragraph_ID) as Total_Paragraphs FROM Paragraphs GROUP BY Document_ID ORDER BY Document_ID
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) as Number_of_Paragraphs FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) as Number_of_Paragraphs FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) >= 2
SELECT Document_ID FROM Documents WHERE Document_ID IN (   SELECT Document_ID   FROM Paragraphs   GROUP BY Document_ID   HAVING COUNT(Paragraph_ID) >= 2 )
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS Paragraph_Count FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name ORDER BY Paragraph_Count DESC LIMIT 1
SELECT Documents.Document_ID, Documents.Document_Name FROM Documents INNER JOIN (   SELECT Document_ID, COUNT(*) AS Paragraph_Count   FROM Paragraphs   GROUP BY Document_ID   ORDER BY Paragraph_Count DESC   LIMIT 1 ) AS Most_Paragraphs ON Documents.Document_ID = Most_Paragraphs.Document_ID
SELECT Document_ID, COUNT(Paragraph_ID) AS Paragraph_Count FROM Paragraphs GROUP BY Document_ID ORDER BY Paragraph_Count LIMIT 1;
SELECT Document_ID FROM Documents WHERE NOT EXISTS (     SELECT 1     FROM Documents sub_d     WHERE sub_d.Document_ID != Documents.Document_ID     AND (         SELECT COUNT(*)         FROM Paragraphs         WHERE Document_ID = sub_d.Document_ID     ) < (         SELECT COUNT(*)         FROM Paragraphs         WHERE Document_ID = Documents.Document_ID     ) ) ORDER BY (     SELECT COUNT(*)     FROM Paragraphs     WHERE Document_ID = Documents.Document_ID ) LIMIT 1
SELECT Document_ID FROM Documents WHERE Document_ID IN (   SELECT Document_ID   FROM Paragraphs   GROUP BY Document_ID   HAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2 )
SELECT Document_ID FROM Documents WHERE Document_ID IN (   SELECT Document_ID   FROM Paragraphs   GROUP BY Document_ID   HAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2 )
SELECT D.Document_ID FROM Documents D JOIN Paragraphs P ON D.Document_ID = P.Document_ID WHERE P.Paragraph_Text = 'Brazil' OR P.Paragraph_Text = 'Ireland' GROUP BY D.Document_ID HAVING COUNT(DISTINCT P.Paragraph_Text) = 2
SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text = 'Brazil' OR Paragraph_Text = 'Ireland' GROUP BY Document_ID HAVING COUNT(*) = 2
SELECT COUNT(*) FROM teacher
SELECT COUNT(*) FROM teacher
SELECT Name  FROM teacher  ORDER BY Age ASC
SELECT Name FROM teacher ORDER BY Age
SELECT Age, Hometown FROM teacher
SELECT Age, Hometown FROM teacher
SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District'
SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District'
SELECT Name FROM teacher WHERE Age = '32' OR Age = '33'
SELECT Name  FROM teacher  WHERE Age in ('32', '33')
SELECT hometown FROM teacher WHERE age = (SELECT MIN(age) FROM teacher)
SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)
SELECT Hometown, COUNT(*) as Number_of_Teachers FROM teacher GROUP BY Hometown ORDER BY Number_of_Teachers DESC
SELECT Hometown, COUNT(Teacher_ID) as Number_of_Teachers FROM teacher GROUP BY Hometown ORDER BY Number_of_Teachers DESC
SELECT Hometown, COUNT(*) as frequency FROM teacher GROUP BY Hometown ORDER BY frequency DESC LIMIT 1
SELECT Hometown, COUNT(Hometown) as frequency  FROM teacher  GROUP BY Hometown  ORDER BY frequency DESC  LIMIT 1
SELECT Hometown, COUNT(Hometown) FROM teacher GROUP BY Hometown HAVING COUNT(Hometown) >= 2
SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID
SELECT teacher.Name, course.Course FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC
SELECT Name  FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  JOIN course ON course_arrange.Course_ID = course.Course_ID  WHERE course.Course = 'math'
SELECT Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = 'math'
SELECT Name, COUNT(*) as Number_of_Courses FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY Name ORDER BY Number_of_Courses DESC
SELECT Name, COUNT(*) as Total_Courses FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY Name
SELECT Name FROM teacher WHERE Teacher_ID IN (   SELECT Teacher_ID   FROM course_arrange   GROUP BY Teacher_ID   HAVING COUNT(*) >= 2 )
SELECT Name FROM teacher WHERE Teacher_ID IN (     SELECT Teacher_ID     FROM course_arrange     GROUP BY Teacher_ID     HAVING COUNT(DISTINCT Course_ID) >= 2 )
SELECT Name  FROM teacher  WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)
SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)
SELECT COUNT(*) FROM visitor WHERE Age < 30
SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC
SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4
SELECT visitor.Name, visitor.Level_of_membership  FROM visitor  WHERE visitor.Level_of_membership > 4  ORDER BY visitor.Age DESC
SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum)
SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < '2009'
SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum'
SELECT Name FROM museum WHERE Num_of_Staff > (SELECT MIN(Num_of_Staff)                       FROM museum                       WHERE Open_Year > '2010')
SELECT visitor.ID, visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID, visitor.Name, visitor.Age HAVING COUNT(visit.Museum_ID) > 1
SELECT visitor.ID, visitor.Name, visitor.Level_of_membership FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID ORDER BY SUM(visit.Total_spent) DESC LIMIT 1
SELECT museum.Museum_ID, museum.Name FROM museum JOIN visit ON museum.Museum_ID = visit.Museum_ID GROUP BY museum.Museum_ID ORDER BY SUM(visit.Num_of_Ticket) DESC LIMIT 1
SELECT Name  FROM museum  WHERE Museum_ID NOT IN (SELECT Museum_ID                         FROM visit)
SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID WHERE visit.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit)
SELECT AVG(Num_of_Ticket) as average_tickets, MAX(Num_of_Ticket) as max_tickets  FROM visit
SELECT SUM(Total_spent) FROM visit JOIN visitor ON visitor.ID = visit.visitor_ID WHERE Level_of_membership = 1
SELECT visitor.Name FROM museum JOIN visit ON museum.Museum_ID = visit.Museum_ID JOIN visitor ON visit.visitor_ID = visitor.ID WHERE (museum.Open_Year < '2009' OR museum.Open_Year > '2011') GROUP BY visitor.Name HAVING COUNT(DISTINCT museum.Open_Year) = 2
SELECT COUNT(*) FROM visitor v WHERE NOT EXISTS (   SELECT 1   FROM visit v1   JOIN museum m ON v1.Museum_ID = m.Museum_ID   WHERE v1.visitor_ID = v.ID AND m.Open_Year > '2010' )
SELECT COUNT(*) FROM museum WHERE Open_Year < '2008' OR Open_Year > '2013'
SELECT COUNT(DISTINCT player_id) FROM players
SELECT COUNT(*) FROM players
SELECT COUNT(*) FROM matches
SELECT COUNT(*) FROM matches
SELECT first_name, birth_date  FROM players  WHERE country_code = 'USA'
SELECT first_name, birth_date  FROM players  WHERE country_code = 'USA'
SELECT AVG(loser_age) as avg_loser_age, AVG(winner_age) as avg_winner_age FROM matches
SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches
SELECT AVG(winner_rank) FROM matches
SELECT AVG(winner_rank) FROM matches
SELECT MAX(loser_rank) FROM matches
SELECT MIN(loser_rank) as best_rank_of_losers FROM matches
SELECT COUNT(DISTINCT loser_ioc) + COUNT(DISTINCT winner_ioc) as number_of_country_codes FROM matches
SELECT COUNT(DISTINCT winner_ioc) FROM matches
SELECT COUNT(DISTINCT loser_name) FROM matches
SELECT COUNT(DISTINCT loser_name) FROM matches
SELECT tourney_name  FROM matches  GROUP BY tourney_name  HAVING COUNT(match_num) > 10  ORDER BY COUNT(match_num) DESC
SELECT tourney_name, COUNT(match_num) as match_count FROM matches GROUP BY tourney_name HAVING match_count > 10
SELECT DISTINCT winner_name  FROM matches  WHERE year = 2013 OR year = 2016  GROUP BY winner_name  HAVING COUNT(DISTINCT year) = 2
SELECT winner_name FROM matches WHERE year = 2013 OR year = 2016 GROUP BY winner_name HAVING COUNT(DISTINCT year) = 2
SELECT COUNT(*)  FROM matches  WHERE year IN (2013, 2016)
SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016
SELECT winner_ioc, winner_name FROM matches WHERE (tourney_name = "WTA Championships" OR tourney_name = "Australian Open") GROUP BY winner_id HAVING COUNT(DISTINCT tourney_name) = 2
SELECT winner_name, winner_ioc FROM matches WHERE (tourney_name = 'WTA Championships' OR tourney_name = 'Australian Open') GROUP BY winner_id HAVING COUNT(DISTINCT tourney_name) = 2
SELECT winner_name, winner_ioc FROM matches WHERE winner_age = (SELECT MAX(winner_age) FROM matches) LIMIT 1
SELECT winner_name, winner_ioc FROM matches WHERE winner_age = (SELECT MAX(winner_age) FROM matches) LIMIT 1
SELECT first_name, last_name FROM players ORDER BY birth_date ASC
SELECT winner_name, loser_name  FROM matches  JOIN players ON players.player_id = matches.winner_id OR players.player_id = matches.loser_id  ORDER BY players.birth_date
SELECT winner_name, loser_name  FROM matches  WHERE winner_hand='L' OR loser_hand='L'  ORDER BY winner_age, loser_age;
SELECT loser_name, loser_ht, loser_age FROM matches WHERE loser_hand = "L" ORDER BY loser_age
SELECT winner_name, winner_ioc  FROM matches  GROUP BY winner_id  ORDER BY COUNT(winner_id) DESC  LIMIT 1
SELECT players.player_id, COUNT(rankings.tours) AS total_tours FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY total_tours DESC LIMIT 1
SELECT year, COUNT(*) as match_count  FROM matches  GROUP BY year  ORDER BY match_count DESC  LIMIT 1
SELECT year, COUNT(*) as match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1
SELECT winner_name, winner_rank_points FROM matches JOIN (SELECT winner_id, COUNT(winner_id) AS win_count       FROM matches       GROUP BY winner_id       ORDER BY win_count DESC       LIMIT 1) AS top_winner ON top_winner.winner_id = matches.winner_id LIMIT 1
SELECT winner_name, SUM(winner_rank_points) as total_rank_points FROM matches JOIN rankings ON matches.winner_id = rankings.player_id GROUP BY winner_name ORDER BY total_rank_points DESC LIMIT 1
SELECT winner_name FROM matches JOIN rankings ON matches.winner_id = rankings.player_id WHERE tourney_name = 'Australian Open' AND winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open')
SELECT winner_name, SUM(winner_rank_points) as total_rank_points FROM matches JOIN rankings ON matches.winner_id = rankings.player_id WHERE tourney_name = 'Australian Open' GROUP BY winner_name ORDER BY total_rank_points DESC LIMIT 1
SELECT loser_name, winner_name  FROM matches  WHERE minutes = (SELECT MAX(minutes) from matches)
SELECT winner_name, loser_name, minutes FROM matches ORDER BY minutes DESC LIMIT 1
SELECT AVG(rankings.ranking) AS avg_ranking, players.first_name FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY players.player_id, players.first_name
SELECT players.first_name, AVG(rankings.ranking) as average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name
SELECT players.first_name, SUM(rankings.ranking_points) as total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name
SELECT players.first_name, SUM(rankings.ranking_points)  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.first_name  ORDER BY SUM(rankings.ranking_points) DESC
SELECT loser_ioc, COUNT(DISTINCT loser_id) FROM matches GROUP BY loser_ioc UNION SELECT winner_ioc, COUNT(DISTINCT winner_id) FROM matches GROUP BY winner_ioc ORDER BY COUNT(DISTINCT loser_id) DESC
SELECT loser_ioc, COUNT(*) FROM matches GROUP BY loser_ioc UNION SELECT winner_ioc, COUNT(*) FROM matches GROUP BY winner_ioc
SELECT loser_ioc, COUNT(loser_ioc) as number_of_players FROM matches GROUP BY loser_ioc ORDER BY number_of_players DESC LIMIT 1;
SELECT loser_ioc as ioc, COUNT(*) FROM matches GROUP BY loser_ioc ORDER BY COUNT(*) DESC LIMIT 1
SELECT loser_ioc, COUNT(loser_ioc)  FROM matches  GROUP BY loser_ioc  HAVING COUNT(loser_ioc) > 50
SELECT loser_ioc, COUNT(*) FROM matches GROUP BY loser_ioc HAVING COUNT(*) > 50
SELECT ranking_date, SUM(tours) as total_tours FROM rankings GROUP BY ranking_date
SELECT ranking_date, SUM(tours) as total_tours FROM rankings GROUP BY ranking_date
SELECT year, COUNT(*) as number_of_matches FROM matches GROUP BY year ORDER BY year
SELECT year, COUNT(*) as match_count FROM matches GROUP BY year
SELECT winner_name, winner_rank  FROM matches  JOIN players ON matches.winner_id = players.player_id  ORDER BY winner_age  LIMIT 3
SELECT winner_name, winner_rank, winner_age FROM matches ORDER BY winner_age LIMIT 3
SELECT COUNT(DISTINCT winner_id)  FROM matches  WHERE winner_hand = 'L'  AND winner_id IN (SELECT player_id                    FROM rankings                    WHERE tourney_name = 'WTA Championships')
SELECT COUNT(*) FROM matches WHERE winner_hand = 'L'  AND tourney_name = 'WTA Championships'
SELECT winner_name, winner_ioc, winner_age FROM matches JOIN players ON matches.winner_id = players.player_id WHERE winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches) LIMIT 1
SELECT winner_name, winner_ioc, winner_age FROM matches JOIN players ON matches.winner_id = players.player_id WHERE winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches) LIMIT 1
SELECT winner_hand, COUNT(winner_hand) as number_of_players FROM matches GROUP BY winner_hand
SELECT winner_hand, COUNT(DISTINCT winner_id) as count_of_players FROM matches GROUP BY winner_hand UNION SELECT loser_hand, COUNT(DISTINCT loser_id) as count_of_players FROM matches GROUP BY loser_hand
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured'
SELECT name, tonnage FROM ship ORDER BY name DESC
SELECT name, date, result FROM battle
SELECT MIN(injured) as minimum_death_toll, MAX(injured) as maximum_death_toll FROM death
SELECT AVG(injured) FROM death
SELECT death.note, death.injured FROM death INNER JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't'
SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril'
SELECT battle.id, battle.name  FROM battle  JOIN ship ON battle.id = ship.lost_in_battle  WHERE ship.ship_type = 'Brig'  GROUP BY battle.id, battle.name
SELECT battle.id, battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle JOIN death ON ship.id = death.caused_by_ship_id GROUP BY battle.id, battle.name HAVING SUM(death.injured) > 10
SELECT caused_by_ship_id, name, SUM(injured) as total_injuries FROM death JOIN ship ON death.caused_by_ship_id = ship.id GROUP BY caused_by_ship_id, name ORDER BY total_injuries DESC LIMIT 1
SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'
SELECT COUNT(DISTINCT result) FROM battle
SELECT COUNT(*) FROM battle b LEFT JOIN ship s ON b.id = s.lost_in_battle WHERE s.tonnage != '225' OR s.tonnage IS NULL
SELECT battle.name, battle.date FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.name = 'Lettice' OR ship.name = 'HMS Atalanta' GROUP BY battle.id
SELECT name, result, bulgarian_commander FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location = 'English Channel')
SELECT note FROM death WHERE note LIKE '%East%'
SELECT line_1, line_2 FROM Addresses
SELECT line_1, line_2 FROM Addresses
SELECT COUNT(*) FROM Courses
SELECT COUNT(*) FROM Courses;
SELECT course_description  FROM Courses  WHERE course_name = 'math'
SELECT course_description FROM Courses WHERE course_name LIKE '%math%'
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'
SELECT zip_postcode  FROM Addresses  WHERE city = 'Port Chelsea'
SELECT Departments.department_name, Departments.department_id, COUNT(Degree_Programs.degree_program_id) as degree_count FROM Departments JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id GROUP BY Departments.department_id ORDER BY degree_count DESC LIMIT 1
SELECT department_name, department_id FROM Departments WHERE department_id = (SELECT department_id FROM Degree_Programs GROUP BY department_id ORDER BY COUNT(degree_program_id) DESC LIMIT 1)
SELECT COUNT(DISTINCT department_id) FROM Degree_Programs
SELECT COUNT(DISTINCT department_id) FROM Degree_Programs
SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs
SELECT COUNT(degree_program_id) FROM Degree_Programs
SELECT COUNT(degree_program_id) FROM Degree_Programs WHERE department_id = (SELECT department_id                        FROM Departments                        WHERE department_name = 'engineering')
SELECT COUNT(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering')
SELECT section_name, section_description FROM Sections
SELECT section_id, section_name, section_description FROM Sections
SELECT course_id, course_name FROM Courses WHERE (SELECT COUNT(section_id)        FROM Sections        WHERE course_id = Courses.course_id) <= 2
SELECT course_id, course_name FROM Courses WHERE (SELECT COUNT(*) FROM Sections WHERE course_id = Courses.course_id) < 2;
SELECT section_name FROM Sections ORDER BY section_name DESC
SELECT section_name  FROM Sections  ORDER BY section_name DESC
SELECT Semesters.semester_name, Semesters.semester_id, COUNT(*) FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id GROUP BY Semesters.semester_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Semesters.semester_name, Semesters.semester_id, COUNT(Student_Enrolment.student_id) as number_of_students FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id GROUP BY Semesters.semester_id ORDER BY number_of_students DESC LIMIT 1
SELECT department_description  FROM Departments  WHERE department_name LIKE '%the computer%'
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
SELECT Students.first_name, Students.middle_name, Students.last_name, Students.student_id FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id HAVING COUNT(DISTINCT Student_Enrolment.degree_program_id) >= 2
SELECT Students.student_id, first_name, middle_name, last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id HAVING COUNT(DISTINCT Student_Enrolment.degree_program_id) = 2 AND COUNT(DISTINCT Student_Enrolment.semester_id) = 1
SELECT first_name, middle_name, last_name  FROM Students  JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id  JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  WHERE Degree_Programs.degree_summary_name = 'Bachelor'
SELECT first_name, middle_name, last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE degree_summary_name = 'Bachelors'
SELECT degree_programs.degree_summary_name, count(student_enrolment.student_id) as total_enrolments FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_programs.degree_summary_name ORDER BY total_enrolments DESC LIMIT 1
SELECT degree_summary_name, count(student_id) as num_students FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY degree_summary_name ORDER BY num_students DESC LIMIT 1
SELECT degree_programs.degree_program_id, degree_summary_name, count(student_enrolment.student_id) as student_count FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_programs.degree_program_id ORDER BY student_count DESC LIMIT 1
SELECT Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name, COUNT(*) AS num_students FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name ORDER BY num_students DESC LIMIT 1
SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name, COUNT(Student_Enrolment.student_id) as number_of_enrollments, Students.student_id FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id ORDER BY number_of_enrollments DESC LIMIT 1
SELECT Students.first_name, Students.middle_name, Students.last_name, Students.student_id, COUNT(Student_Enrolment.student_id) AS enrolments FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id ORDER BY enrolments DESC LIMIT 1
SELECT Semesters.semester_name FROM Semesters LEFT JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id WHERE Student_Enrolment.student_enrolment_id IS NULL GROUP BY Semesters.semester_name
SELECT Semesters.semester_name FROM Semesters LEFT JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id WHERE Student_Enrolment.student_enrolment_id IS NULL GROUP BY Semesters.semester_name
SELECT Courses.course_name  FROM Courses  INNER JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id
SELECT DISTINCT course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id;
SELECT course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY course_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT course_name, COUNT(student_course_id) FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY course_name ORDER BY COUNT(student_course_id) DESC LIMIT 1
SELECT last_name FROM Students WHERE current_address_id IN (SELECT address_id FROM Addresses WHERE state_province_county = 'North Carolina') AND student_id NOT IN (SELECT student_id FROM Student_Enrolment)
SELECT last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id LEFT JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id WHERE state_province_county = 'North Carolina' AND degree_program_id IS NULL
SELECT transcripts.transcript_id, transcripts.transcript_date FROM transcripts JOIN Transcript_Contents ON transcripts.transcript_id = Transcript_Contents.transcript_id GROUP BY transcripts.transcript_id HAVING COUNT(Transcript_Contents.student_course_id) >= 2;
SELECT transcript_id, transcript_date FROM Transcripts t WHERE EXISTS (   SELECT 1   FROM Transcript_Contents tc   WHERE tc.transcript_id = t.transcript_id   GROUP BY tc.transcript_id   HAVING COUNT(tc.student_course_id) >= 2 )
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
SELECT first_name, middle_name, last_name FROM Students WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM Students)
SELECT first_name, middle_name, last_name FROM Students WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM Students) LIMIT 1
SELECT first_name, middle_name, last_name FROM Students WHERE date_left = (SELECT MIN(date_left) FROM Students)
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1
SELECT first_name FROM Students WHERE current_address_id != permanent_address_id
SELECT first_name  FROM Students  WHERE current_address_id != permanent_address_id
SELECT current_address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details, COUNT(student_id) as count_of_students FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id GROUP BY current_address_id ORDER BY count_of_students DESC LIMIT 1
SELECT Addresses.address_id, line_1, line_2, COUNT(Students.student_id) AS student_count FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id OR Addresses.address_id = Students.permanent_address_id GROUP BY Addresses.address_id ORDER BY student_count DESC LIMIT 1;
SELECT AVG(transcript_date) FROM Transcripts
SELECT AVG(transcript_date) FROM Transcripts
SELECT MIN(transcript_date) AS first_transcript_date, other_details FROM Transcripts
SELECT MIN(transcript_date) as earliest_transcript_date FROM Transcripts
SELECT COUNT(*) FROM Transcripts
SELECT COUNT(*) FROM Transcripts
SELECT MAX(transcript_date) as last_transcript_release_date FROM Transcripts
SELECT MAX(transcript_date)  FROM Transcripts
SELECT student_course_id, COUNT(*) as count FROM Transcript_Contents GROUP BY student_course_id HAVING count > 1
SELECT student_course_id, count(transcript_id) as num_transcripts FROM Transcript_Contents GROUP BY student_course_id ORDER BY num_transcripts DESC LIMIT 1
SELECT MIN(T.transcript_date) AS min_date, T.transcript_id FROM Transcripts T JOIN Transcript_Contents TC ON T.transcript_id = TC.transcript_id GROUP BY T.transcript_id ORDER BY COUNT(TC.student_course_id) LIMIT 1
SELECT MIN(transcript_date) AS earliest_transcript_date, transcript_id FROM Transcripts GROUP BY transcript_id ORDER BY earliest_transcript_date LIMIT 1
SELECT Semesters.semester_name FROM Semesters INNER JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id INNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Master' INTERSECT SELECT Semesters.semester_name FROM Semesters INNER JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id INNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Bachelor'
SELECT Semesters.semester_id  FROM Semesters  INNER JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id  INNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  GROUP BY Semesters.semester_id  HAVING COUNT(DISTINCT Degree_Programs.degree_summary_name) > 1
SELECT COUNT(DISTINCT current_address_id) FROM Students
SELECT line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details FROM Addresses WHERE address_id IN  (   SELECT current_address_id    FROM Students ) OR address_id IN  (   SELECT permanent_address_id    FROM Students )
SELECT * FROM Students ORDER BY last_name DESC, first_name DESC, middle_name DESC
SELECT other_student_details  FROM Students  ORDER BY other_student_details DESC
SELECT * FROM Addresses;
SELECT section_description FROM Sections WHERE section_name = 'h'
SELECT first_name  FROM Students  WHERE permanent_address_id IN (SELECT address_id                                 FROM Addresses                                 WHERE country = 'Haiti')    OR cell_mobile_number = '09700166582'
SELECT first_name FROM Students WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582'
SELECT Title FROM Cartoon ORDER BY Title ASC
SELECT Title FROM Cartoon ORDER BY Title ASC
SELECT * FROM Cartoon WHERE Directed_by = 'Ben Jones'
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'
SELECT Title, Directed_by, Original_air_date  FROM Cartoon  ORDER BY Original_air_date
SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date
SELECT Title  FROM Cartoon  WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'
SELECT Country, COUNT(*) FROM TV_Channel GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1
SELECT Country, COUNT(*) as Total_Channels FROM TV_Channel GROUP BY Country ORDER BY Total_Channels DESC LIMIT 1
SELECT count(DISTINCT series_name), count(DISTINCT Content) FROM TV_Channel;
SELECT COUNT(DISTINCT series_name) + COUNT(DISTINCT Content) FROM TV_Channel;
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT Content  FROM TV_Channel  WHERE series_name = 'Sky Radio'
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'
SELECT Language, COUNT(Language) AS Channel_Count FROM TV_Channel GROUP BY Language ORDER BY Channel_Count LIMIT 1
SELECT Language, COUNT(Language) as Channel_Count FROM TV_Channel GROUP BY Language ORDER BY Channel_Count LIMIT 1
SELECT Language, COUNT(Language) as Number_of_TV_Channels FROM TV_Channel GROUP BY Language
SELECT Language, COUNT(Language) as Number_of_TV_Channels FROM TV_Channel GROUP BY Language ORDER BY Number_of_TV_Channels DESC
SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = 'The Rise of the Blue Beetle!'
SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = 'The Rise of the Blue Beetle'
SELECT Title FROM Cartoon WHERE Channel IN (   SELECT id   FROM TV_Channel   WHERE series_name = 'Sky Radio' )
SELECT Title FROM Cartoon WHERE Channel = (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio')
SELECT Episode, Rating FROM TV_series ORDER BY Rating
SELECT * FROM TV_series ORDER BY Rating DESC
SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3
SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3
SELECT MIN(Share) as Minimum_Share, MAX(Share) as Maximum_Share FROM TV_series
SELECT MAX(Share) as Maximum_Share, MIN(Share) as Minimum_Share FROM TV_series
SELECT Air_Date  FROM TV_series  WHERE Episode = 'A Love of a Lifetime'
SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'
SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'
SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'
SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = 'A Love of a Lifetime'
SELECT series_name FROM TV_Channel INNER JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE Episode = 'A Love of a Lifetime'
SELECT Episode FROM TV_series WHERE Channel = (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio')
SELECT Episode FROM TV_series WHERE Channel = (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio')
SELECT Directed_by, COUNT(*) FROM Cartoon GROUP BY Directed_by
SELECT Directed_by, count(*) as Total_Cartoons_Directed FROM Cartoon GROUP BY Directed_by
SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1
SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1
SELECT TV_Channel.Package_Option, TV_Channel.series_name  FROM TV_Channel  WHERE TV_Channel.Hight_definition_TV = 'YES'
SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = 'yes'
SELECT TV_Channel.Country  FROM TV_Channel  JOIN Cartoon  ON TV_Channel.id = Cartoon.Channel  WHERE Cartoon.Written_by = 'Todd Casey'  GROUP BY TV_Channel.Country
SELECT TV_Channel.Country  FROM TV_Channel  JOIN Cartoon ON TV_Channel.id = Cartoon.Channel  WHERE Cartoon.Written_by = 'Todd Casey'
SELECT TV_Channel.Country FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by != 'Todd Casey' OR Cartoon.Written_by IS NULL GROUP BY TV_Channel.Country HAVING COUNT(Cartoon.id) = 0
SELECT DISTINCT TV_Channel.Country FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by != 'Todd Casey' OR Cartoon.Written_by IS NULL
SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel INNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang') GROUP BY TV_Channel.series_name, TV_Channel.Country
SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE (Cartoon.Directed_by = 'Ben Jones' OR Cartoon.Directed_by = 'Michael Chang') GROUP BY TV_Channel.series_name, TV_Channel.Country
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English'
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English'
SELECT Country, COUNT(*) FROM TV_Channel GROUP BY Country HAVING COUNT(*) > 2
SELECT id FROM TV_Channel GROUP BY id HAVING COUNT(id) > 2
SELECT id  FROM TV_Channel  WHERE id NOT IN  (SELECT Channel  FROM Cartoon  WHERE Directed_by = 'Ben Jones')
SELECT TV_Channel.id  FROM TV_Channel  LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel  WHERE Cartoon.Directed_by != 'Ben Jones' OR Cartoon.Directed_by IS NULL  GROUP BY TV_Channel.id  HAVING COUNT(Cartoon.id) = 0
SELECT TV_Channel.Package_Option FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by != 'Ben Jones' GROUP BY TV_Channel.id HAVING COUNT(Cartoon.id) = 0
SELECT TV_Channel.Package_Option  FROM TV_Channel  WHERE NOT EXISTS (     SELECT *      FROM Cartoon      WHERE Cartoon.Directed_by = 'Ben Jones'      AND Cartoon.Channel = TV_Channel.id )
SELECT COUNT(*) FROM poker_player
SELECT COUNT(*) FROM poker_player
SELECT Earnings  FROM poker_player  ORDER BY Earnings DESC
SELECT Earnings FROM poker_player ORDER BY Earnings DESC
SELECT Final_Table_Made, Best_Finish FROM poker_player
SELECT Final_Table_Made, Best_Finish FROM poker_player
SELECT AVG(Earnings) FROM poker_player
SELECT AVG(Earnings) FROM poker_player
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player)
SELECT MAX(Final_Table_Made)  FROM poker_player  WHERE Earnings < 200000
SELECT MAX(Final_Table_Made)  FROM poker_player  WHERE Earnings < 200000
SELECT Name FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID
SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID
SELECT Name  FROM people  WHERE People_ID in (SELECT People_ID                      FROM poker_player                      WHERE Earnings > 300000)
SELECT Name  FROM people  JOIN poker_player  ON people.People_ID = poker_player.People_ID  WHERE Earnings > 300000
SELECT Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY Final_Table_Made ASC
SELECT Name  FROM people  JOIN poker_player  ON people.People_ID = poker_player.People_ID  ORDER BY Final_Table_Made ASC
SELECT Birth_Date FROM people WHERE People_ID = (SELECT People_ID                    FROM poker_player                    ORDER BY Earnings                    LIMIT 1)
SELECT Birth_Date FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE Earnings = (SELECT MIN(Earnings) FROM poker_player)
SELECT Money_Rank FROM poker_player WHERE Poker_Player_ID = (SELECT Poker_Player_ID FROM people ORDER BY Height DESC LIMIT 1)
SELECT Money_Rank FROM poker_player pp INNER JOIN people p ON pp.People_ID = p.People_ID WHERE p.Height = (SELECT MAX(Height) FROM people) ORDER BY Money_Rank DESC LIMIT 1
SELECT AVG(Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height > 200
SELECT AVG(Earnings) FROM poker_player WHERE People_ID IN (SELECT People_ID FROM people WHERE Height > 200)
SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY Earnings DESC
SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY Earnings DESC
SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality
SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality
SELECT Nationality, COUNT(*) as count FROM people GROUP BY Nationality ORDER BY count DESC LIMIT 1;
SELECT Nationality, COUNT(*) as count FROM people GROUP BY Nationality ORDER BY count DESC LIMIT 1
SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality HAVING COUNT(*) >= 2
SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality HAVING COUNT(*) >= 2
SELECT Name, Birth_Date  FROM people  ORDER BY Name ASC
SELECT Name, Birth_Date FROM people ORDER BY Name ASC
SELECT Name FROM people WHERE Nationality != "Russia"
SELECT Name FROM people WHERE Nationality != 'Russia'
SELECT people.Name FROM people LEFT JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Poker_Player_ID IS NULL
SELECT Name  FROM people  WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
SELECT COUNT(DISTINCT Nationality) FROM people
SELECT COUNT(DISTINCT Nationality) FROM people
SELECT count(distinct state) FROM AREA_CODE_STATE
SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC
SELECT vote_id, phone_number, state FROM VOTES
SELECT MAX(area_code), MIN(area_code) FROM AREA_CODE_STATE
SELECT MAX(created) FROM VOTES WHERE state = 'CA'
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway'
SELECT DISTINCT state, created FROM VOTES ORDER BY created DESC;
SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number IN ( 	SELECT contestant_number 	FROM VOTES 	GROUP BY contestant_number 	HAVING COUNT(*) >= 2 )
SELECT CONTESTANTS.contestant_number, CONTESTANTS.contestant_name FROM CONTESTANTS WHERE CONTESTANTS.contestant_number = (SELECT contestant_number                                          FROM VOTES                                          GROUP BY contestant_number                                          ORDER BY COUNT(vote_id)                                          LIMIT 1)
SELECT COUNT(vote_id) FROM VOTES WHERE state IN ('NY', 'CA')
SELECT COUNT(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES)
SELECT AREA_CODE_STATE.state, area_code, count(*) as vote_count FROM VOTES JOIN AREA_CODE_STATE ON VOTES.state = AREA_CODE_STATE.state GROUP BY AREA_CODE_STATE.state, area_code ORDER BY vote_count DESC LIMIT 1
SELECT VOTES.created, AREA_CODE_STATE.state, VOTES.phone_number  FROM VOTES  JOIN AREA_CODE_STATE ON VOTES.state = AREA_CODE_STATE.state  JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number  WHERE contestant_name = 'Tabatha Gehling'  ORDER BY VOTES.created DESC
SELECT area_code FROM AREA_CODE_STATE WHERE state IN (   SELECT state   FROM VOTES   WHERE contestant_number IN (     SELECT contestant_number     FROM CONTESTANTS     WHERE contestant_name IN ('Tabatha Gehling', 'Kelly Clauss')   )   GROUP BY state   HAVING COUNT(DISTINCT contestant_number) = 2 )
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%'
SELECT Name FROM COUNTRY WHERE IndepYear > 1950
SELECT Name FROM COUNTRY WHERE IndepYear > 1950
SELECT COUNT(*)  FROM COUNTRY  WHERE GovernmentForm = 'Republic'
SELECT COUNT(*) FROM COUNTRY WHERE GovernmentForm = 'Republic'
SELECT SUM(SurfaceArea) FROM COUNTRY WHERE Region = 'Caribbean'
SELECT SUM(SurfaceArea) FROM COUNTRY WHERE Continent = 'Caribbean'
SELECT Continent FROM COUNTRY WHERE Name = 'Anguilla'
SELECT Continent FROM COUNTRY WHERE Name = 'Anguilla'
SELECT Region FROM COUNTRY WHERE Name = 'Kabul'
SELECT Region  FROM COUNTRY  WHERE Name = 'Kabul'
SELECT Language, Percentage FROM COUNTRYLANGUAGE WHERE CountryCode = 'ABW' ORDER BY Percentage DESC LIMIT 1
SELECT Language FROM COUNTRYLANGUAGE WHERE CountryCode = 'ABW' ORDER BY Percentage DESC LIMIT 1
SELECT Population, LifeExpectancy FROM COUNTRY WHERE Name = 'Brazil'
SELECT Population, LifeExpectancy  FROM COUNTRY  WHERE Name = 'Brazil'
SELECT Region, Population FROM COUNTRY WHERE Name = 'Angola'
SELECT Region, Population FROM COUNTRY WHERE Name = 'Angola'
SELECT AVG(LifeExpectancy) FROM COUNTRY WHERE Region = 'Central Africa'
SELECT AVG(LifeExpectancy) FROM COUNTRY WHERE Region = 'Central Africa'
SELECT Name FROM COUNTRY WHERE Continent = 'Asia' ORDER BY LifeExpectancy LIMIT 1
SELECT Name  FROM COUNTRY  WHERE Continent = 'Asia' AND LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM COUNTRY WHERE Continent = 'Asia')
SELECT SUM(COUNTRY.Population) as Total_Population, MAX(COUNTRY.GNP) as Maximum_GNP FROM COUNTRY WHERE COUNTRY.Continent = 'Asia'
SELECT SUM(Population) AS TotalPopulation, MAX(GNP) AS LargestGNP FROM COUNTRY WHERE Continent = 'Asia'
SELECT AVG(LifeExpectancy) FROM COUNTRY WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'
SELECT AVG(LifeExpectancy) FROM COUNTRY WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'
SELECT SUM(SurfaceArea)  FROM COUNTRY  WHERE Continent='Asia' OR Continent='Europe'
SELECT SUM(SurfaceArea) FROM COUNTRY WHERE Continent='Asia' OR Continent='Europe'
SELECT SUM(Population)  FROM CITY  WHERE District = 'Gelderland'  GROUP BY District
SELECT SUM(Population) FROM CITY WHERE District = 'Gelderland'
SELECT AVG(GNP), SUM(Population) FROM COUNTRY WHERE GovernmentForm = 'US territory'
SELECT AVG(GNP) as Mean_GNP, SUM(Population) as Total_Population FROM COUNTRY WHERE Continent = 'North America' AND Region = 'Central America';
SELECT COUNT(DISTINCT Language) FROM COUNTRYLANGUAGE
SELECT COUNT(DISTINCT Language) FROM COUNTRYLANGUAGE
SELECT COUNT(DISTINCT GOVERNMENTFORM) FROM COUNTRY WHERE Continent = 'Africa'
SELECT COUNT(DISTINCT GovernmentForm) FROM COUNTRY WHERE Continent = 'Africa'
SELECT COUNT(Language) FROM COUNTRYLANGUAGE WHERE CountryCode = 'ABW'
SELECT COUNT(Language)  FROM COUNTRYLANGUAGE  WHERE CountryCode = 'ABW'
SELECT COUNT(Language) FROM COUNTRYLANGUAGE WHERE CountryCode = 'AFG' AND IsOfficial = 'T'
SELECT COUNT(*) FROM COUNTRYLANGUAGE WHERE CountryCode = 'AFG' AND IsOfficial = 'T'
SELECT c.Name as Country, COUNT(cl.Language) as Number_of_Languages FROM COUNTRY c JOIN COUNTRYLANGUAGE cl ON c.Code = cl.CountryCode GROUP BY c.Name ORDER BY Number_of_Languages DESC LIMIT 1
SELECT Name, COUNT(Language) as TotalLanguages FROM COUNTRY JOIN COUNTRYLANGUAGE ON COUNTRY.Code = COUNTRYLANGUAGE.CountryCode GROUP BY Name ORDER BY TotalLanguages DESC LIMIT 1
SELECT Continent, COUNT(DISTINCT Language) as "Number of Languages" FROM COUNTRY JOIN COUNTRYLANGUAGE ON COUNTRY.Code = COUNTRYLANGUAGE.CountryCode GROUP BY Continent ORDER BY "Number of Languages" DESC LIMIT 1;
SELECT    Continent,   sum(Percentage) as TotalPercentage FROM    COUNTRY c   JOIN      COUNTRYLANGUAGE cl    ON      c.Code = cl.CountryCode GROUP BY    Continent ORDER BY    TotalPercentage DESC LIMIT 1
SELECT COUNT(DISTINCT cl1.CountryCode) FROM COUNTRYLANGUAGE cl1 JOIN COUNTRYLANGUAGE cl2 ON cl1.CountryCode = cl2.CountryCode WHERE cl1.Language = 'English' AND cl2.Language = 'Dutch'
SELECT COUNT(DISTINCT cl1.CountryCode) FROM COUNTRYLANGUAGE cl1 JOIN COUNTRYLANGUAGE cl2 ON cl1.CountryCode = cl2.CountryCode WHERE cl1.Language = 'English' AND cl2.Language = 'Dutch'
SELECT DISTINCT c.Name FROM COUNTRY c JOIN COUNTRYLANGUAGE cl ON c.Code = cl.CountryCode WHERE cl.Language = 'English' OR cl.Language = 'French' GROUP BY c.Name HAVING COUNT(DISTINCT cl.Language) = 2
SELECT DISTINCT c.Name FROM COUNTRY c JOIN COUNTRYLANGUAGE cl1 ON c.Code = cl1.CountryCode JOIN COUNTRYLANGUAGE cl2 ON c.Code = cl2.CountryCode WHERE cl1.Language = 'English' AND cl2.Language = 'French'
SELECT DISTINCT c.Name FROM COUNTRY c JOIN COUNTRYLANGUAGE cl ON c.Code = cl.CountryCode WHERE cl.Language = 'English' OR cl.Language = 'French' GROUP BY c.Name HAVING COUNT(DISTINCT cl.Language) = 2
SELECT Name  FROM COUNTRY  WHERE Code IN (   SELECT CountryCode    FROM COUNTRYLANGUAGE    WHERE Language IN ('English', 'French')      AND IsOfficial = 'T'    GROUP BY CountryCode    HAVING COUNT(*) = 2 )
SELECT COUNT(DISTINCT c.Continent) FROM COUNTRY c JOIN COUNTRYLANGUAGE cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Chinese'
SELECT COUNT(DISTINCT c.Continent) FROM COUNTRY c JOIN COUNTRYLANGUAGE cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Chinese'
SELECT Region FROM COUNTRY WHERE Code IN (   SELECT CountryCode   FROM COUNTRYLANGUAGE   WHERE Language IN ('English', 'Dutch') )
SELECT DISTINCT Region  FROM COUNTRY c  JOIN COUNTRYLANGUAGE cl ON c.Code = cl.CountryCode  WHERE Language = 'Dutch' OR Language = 'English'
SELECT Name  FROM COUNTRY  WHERE Code IN ( 	SELECT CountryCode  	FROM COUNTRYLANGUAGE  	WHERE IsOfficial = 'T' AND (Language = 'English' OR Language = 'Dutch') )
SELECT DISTINCT Country.Name FROM Country JOIN COUNTRYLANGUAGE ON Country.Code = COUNTRYLANGUAGE.CountryCode WHERE (COUNTRYLANGUAGE.Language = 'English' OR COUNTRYLANGUAGE.Language = 'Dutch') AND COUNTRYLANGUAGE.IsOfficial = 'T'
SELECT Language, SUM(Percentage) as TotalPercentage FROM COUNTRYLANGUAGE JOIN COUNTRY ON COUNTRYLANGUAGE.CountryCode = COUNTRY.Code WHERE Continent = 'Asia' GROUP BY Language ORDER BY TotalPercentage DESC LIMIT 1
SELECT Language, COUNT(*) as count FROM COUNTRYLANGUAGE JOIN COUNTRY ON COUNTRYLANGUAGE.CountryCode = COUNTRY.Code WHERE Continent = 'Asia' GROUP BY Language ORDER BY count DESC LIMIT 1;
SELECT DISTINCT Language FROM COUNTRYLANGUAGE WHERE CountryCode IN (   SELECT CountryCode   FROM COUNTRY   WHERE GovernmentForm = 'Republic' ) GROUP BY Language HAVING COUNT(CountryCode) = 1
SELECT cl.Language FROM COUNTRYLANGUAGE cl JOIN (SELECT c.Code       FROM COUNTRY c       JOIN COUNTRYLANGUAGE cl2       ON c.Code = cl2.CountryCode       WHERE c.GovernmentForm = 'Republic'       GROUP BY c.Code       HAVING COUNT(DISTINCT cl2.Language) = 1) c ON cl.CountryCode = c.Code
SELECT c.Name, c.Population FROM CITY c JOIN COUNTRYLANGUAGE cl ON c.CountryCode = cl.CountryCode WHERE cl.Language = 'English' ORDER BY c.Population DESC LIMIT 1
SELECT c.Name as CityName, cl.Percentage as EnglishPercentage, c.Population FROM CITY c JOIN COUNTRYLANGUAGE cl ON c.CountryCode = cl.CountryCode WHERE cl.Language = 'English' ORDER BY c.Population DESC LIMIT 1
SELECT Name, Population, LifeExpectancy FROM COUNTRY WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1
SELECT Name, Population, LifeExpectancy FROM COUNTRY WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1
SELECT AVG(LifeExpectancy) FROM COUNTRY WHERE NOT EXISTS (   SELECT 1   FROM COUNTRYLANGUAGE   WHERE Country.Code = CountryCode AND Language = "English" AND IsOfficial = "T" )
SELECT AVG(c.LifeExpectancy) FROM COUNTRY c JOIN COUNTRYLANGUAGE cl ON c.Code = cl.CountryCode WHERE cl.Language != 'English' OR cl.IsOfficial != 'T' GROUP BY cl.Language;
SELECT SUM(c.Population) FROM COUNTRY c WHERE NOT EXISTS ( 	SELECT 1 	FROM COUNTRYLANGUAGE cl 	WHERE cl.CountryCode = c.Code 		AND cl.Language = 'English' 		AND cl.IsOfficial = 'T' )
SELECT SUM(Population) FROM COUNTRY WHERE Code NOT IN (SELECT CountryCode FROM COUNTRYLANGUAGE WHERE Language='English' AND IsOfficial='T')
SELECT Language FROM COUNTRYLANGUAGE WHERE IsOfficial = 'T' AND CountryCode = (SELECT Code                     FROM COUNTRY                     WHERE HeadOfState = 'Beatrix');
SELECT Language FROM COUNTRYLANGUAGE WHERE IsOfficial = 'T' AND CountryCode = (SELECT Code FROM COUNTRY WHERE HeadOfState = 'Beatrix')
SELECT COUNT(DISTINCT cl.Language) FROM COUNTRY c JOIN COUNTRYLANGUAGE cl ON c.Code = cl.CountryCode WHERE c.IndepYear < 1930 AND cl.IsOfficial = 'T'
SELECT COUNT(DISTINCT cl.Language) FROM COUNTRY c JOIN COUNTRYLANGUAGE cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T' AND c.IndepYear < 1930 GROUP BY c.IndepYear
SELECT Name FROM COUNTRY WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM COUNTRY WHERE Continent = 'Europe')
SELECT Name FROM COUNTRY WHERE Continent != 'Europe' AND SurfaceArea > (SELECT MAX(SurfaceArea) FROM COUNTRY WHERE Continent = 'Europe')
SELECT Name FROM COUNTRY WHERE Continent = 'Africa' AND Population < (SELECT MIN(Population) FROM COUNTRY WHERE Continent = 'Asia')
SELECT c1.Name FROM COUNTRY c1 JOIN (   SELECT MIN(Population) min_pop   FROM COUNTRY   WHERE Continent = 'Asia' ) c2 ON c1.Population < c2.min_pop WHERE c1.Continent = 'Africa'
SELECT Name FROM COUNTRY WHERE Continent='Asia' AND Population > (SELECT MAX(Population) FROM COUNTRY WHERE Continent='Africa')
SELECT Name FROM COUNTRY WHERE Continent = 'Asia' AND Population > (SELECT MAX(Population) FROM COUNTRY WHERE Continent = 'Africa')
SELECT DISTINCT CountryCode FROM COUNTRYLANGUAGE WHERE Language != 'English' AND IsOfficial = 'T'
SELECT Code  FROM COUNTRY  WHERE Code NOT IN (SELECT CountryCode FROM COUNTRYLANGUAGE WHERE Language = 'English' AND IsOfficial = 'T')
SELECT DISTINCT CountryCode FROM COUNTRYLANGUAGE WHERE Language != 'English'
SELECT DISTINCT CountryCode  FROM COUNTRYLANGUAGE  WHERE Language != 'English'
SELECT Code FROM COUNTRY WHERE NOT EXISTS (   SELECT *   FROM COUNTRYLANGUAGE   WHERE CountryCode = COUNTRY.Code AND Language = 'English' AND IsOfficial = 'T' ) AND GovernmentForm != 'Republic'
SELECT Code FROM COUNTRY WHERE GovernmentForm != 'Republic' AND Code NOT IN (   SELECT CountryCode   FROM COUNTRYLANGUAGE   WHERE Language = 'English' )
SELECT c1.Name FROM CITY c1 JOIN COUNTRY c2 ON c1.CountryCode = c2.Code JOIN COUNTRYLANGUAGE cl ON c1.CountryCode = cl.CountryCode WHERE c2.Continent = 'Europe' AND cl.Language = 'English' AND cl.IsOfficial != 'T'
SELECT ct.Name FROM CITY ct JOIN COUNTRY co ON ct.CountryCode = co.Code JOIN COUNTRYLANGUAGE cl ON ct.CountryCode = cl.CountryCode WHERE co.Continent = 'Europe' AND cl.Language != 'English' AND cl.IsOfficial = 'T'
SELECT DISTINCT c1.Name FROM CITY c1 JOIN COUNTRY c2 ON c1.CountryCode = c2.Code JOIN COUNTRYLANGUAGE cl ON c1.CountryCode = cl.CountryCode WHERE c2.Continent = 'Asia' AND cl.Language = 'Chinese' AND cl.IsOfficial = 'T'
SELECT Name FROM CITY WHERE District = 'Asia' AND EXISTS ( 	SELECT 1 	FROM COUNTRYLANGUAGE 	WHERE CountryCode = CITY.CountryCode 	AND Language = 'Chinese' 	AND IsOfficial = 'T' )
SELECT Name, IndepYear, SurfaceArea FROM COUNTRY ORDER BY Population LIMIT 1
SELECT Name, IndepYear, SurfaceArea  FROM COUNTRY ORDER BY Population LIMIT 1;
SELECT Population, Name, HeadOfState FROM COUNTRY WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM COUNTRY)
SELECT Name, Population, HeadOfState FROM COUNTRY WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM COUNTRY)
SELECT Name, COUNT(Language) as NumberOfLanguages FROM COUNTRY JOIN COUNTRYLANGUAGE ON COUNTRY.Code = COUNTRYLANGUAGE.CountryCode GROUP BY Name HAVING COUNT(Language) >= 3
SELECT    Name,    COUNT(Language) as NumberOfLanguages  FROM    COUNTRY    INNER JOIN      COUNTRYLANGUAGE      ON COUNTRY.Code = COUNTRYLANGUAGE.CountryCode  GROUP BY    Name  HAVING    COUNT(Language) > 2  ORDER BY    NumberOfLanguages DESC
SELECT District, COUNT(*) as num_of_cities FROM CITY WHERE Population > (SELECT AVG(Population) FROM CITY) GROUP BY District
SELECT District, COUNT(*) as Total_Cities, SUM(CASE WHEN Population > (SELECT AVG(Population) FROM CITY) THEN 1 ELSE 0 END) as Cities_Above_Avg_Population FROM CITY GROUP BY District
SELECT GovernmentForm, SUM(Population) as TotalPopulation FROM COUNTRY GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72
SELECT GovernmentForm, sum(Population) as Total_Population FROM COUNTRY WHERE LifeExpectancy > 72 GROUP BY GovernmentForm
SELECT    Continent,    AVG(LifeExpectancy) as AverageLifeExpectancy,    SUM(Population) as TotalPopulation FROM    COUNTRY WHERE    LifeExpectancy < 72 GROUP BY    Continent HAVING    AVG(LifeExpectancy) < 72
SELECT Continent, SUM(Population) as Total_Population, AVG(LifeExpectancy) as Average_LifeExpectancy FROM (SELECT Continent, Population, LifeExpectancy FROM COUNTRY) GROUP BY Continent HAVING AVG(LifeExpectancy) < 72
SELECT Name, SurfaceArea FROM COUNTRY ORDER BY SurfaceArea DESC LIMIT 5
SELECT Name, SurfaceArea FROM COUNTRY ORDER BY SurfaceArea DESC LIMIT 5;
SELECT Name FROM COUNTRY ORDER BY Population DESC LIMIT 3
SELECT Name  FROM COUNTRY  ORDER BY Population DESC  LIMIT 3
SELECT Name  FROM COUNTRY  ORDER BY Population  LIMIT 3
SELECT Name  FROM COUNTRY  ORDER BY Population  LIMIT 3
SELECT COUNT(*) FROM COUNTRY WHERE Continent='Asia'
SELECT COUNT(*) FROM COUNTRY WHERE Continent = 'Asia'
SELECT Name FROM COUNTRY WHERE Continent = 'Europe' AND Population = 80000
SELECT Name FROM COUNTRY WHERE Continent = 'Europe' AND Population = 80000;
SELECT SUM(Population) as Total_Population, AVG(SurfaceArea) as Average_Area FROM COUNTRY WHERE Continent = 'North America' AND SurfaceArea > 3000
SELECT SUM(COUNTRY.Population) as Total_Population, AVG(COUNTRY.SurfaceArea) as Average_Surface_Area FROM COUNTRY WHERE COUNTRY.Continent = 'North America' AND COUNTRY.SurfaceArea > 3000
SELECT Name  FROM CITY  WHERE Population BETWEEN 160000 AND 900000
SELECT Name  FROM CITY  WHERE Population BETWEEN 160000 AND 900000
SELECT Language, COUNT(CountryCode) as NumberOfCountries FROM COUNTRYLANGUAGE GROUP BY Language ORDER BY NumberOfCountries DESC LIMIT 1
SELECT Language, COUNT(*) as NumOfCountries FROM COUNTRYLANGUAGE GROUP BY Language ORDER BY NumOfCountries DESC LIMIT 1
SELECT    CountryCode,    Language,    MAX(Percentage) AS MaxPercentage FROM    COUNTRYLANGUAGE GROUP BY    CountryCode
SELECT    COUNTRY.Code,    COUNTRYLANGUAGE.Language,    MAX(Percentage) AS MaxPercentage FROM    COUNTRY    INNER JOIN COUNTRYLANGUAGE ON COUNTRY.Code = COUNTRYLANGUAGE.CountryCode GROUP BY    COUNTRY.Code ORDER BY    MaxPercentage DESC
SELECT COUNT(DISTINCT cl.CountryCode) FROM COUNTRYLANGUAGE cl WHERE cl.Language = 'Spanish' GROUP BY cl.CountryCode HAVING cl.Percentage = MAX(cl.Percentage)
SELECT COUNT(*) FROM COUNTRYLANGUAGE WHERE Language = 'Spanish' AND Percentage >= 50
SELECT CountryCode FROM COUNTRYLANGUAGE WHERE Language = 'Spanish' ORDER BY Percentage DESC LIMIT 1
SELECT CountryCode FROM COUNTRYLANGUAGE WHERE Language = 'Spanish' AND IsOfficial = 'T' AND Percentage >= 50.0
SELECT COUNT(*) FROM conductor
SELECT COUNT(*) FROM conductor
SELECT Name FROM conductor ORDER BY Age ASC
SELECT Name, Age  FROM conductor  ORDER BY Age
SELECT Name FROM conductor WHERE Nationality != 'USA'
SELECT Name FROM conductor WHERE Nationality != "USA"
SELECT Record_Company, Year_of_Founded FROM orchestra ORDER BY Year_of_Founded DESC
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
SELECT AVG(Attendance) as average_attendance FROM show
SELECT AVG(Attendance) as Average_Attendance FROM show
SELECT MIN(Share), MAX(Share) FROM performance WHERE Type != 'Live final'
SELECT MAX(Share) as Maximum_Share, MIN(Share) as Minimum_Share FROM performance WHERE Type != 'Live final'
SELECT COUNT(DISTINCT Nationality) FROM conductor;
SELECT COUNT(DISTINCT Nationality) FROM conductor
SELECT Name, Year_of_Work FROM conductor ORDER BY Year_of_Work DESC
SELECT Name, Year_of_Work  FROM conductor  ORDER BY Year_of_Work DESC
SELECT Name, MAX(Year_of_Work) as Most_Years_of_Work FROM conductor GROUP BY Name ORDER BY Most_Years_of_Work DESC LIMIT 1
SELECT Name, MAX(Year_of_Work) as Years_Worked FROM conductor GROUP BY Name ORDER BY Years_Worked DESC LIMIT 1
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID
SELECT conductor.Name, COUNT(DISTINCT orchestra.Orchestra_ID) as Number_of_Orchestras FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name HAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name HAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1
SELECT conductor.Name, COUNT(orchestra.Conductor_ID) as Number_of_Orchestras FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name ORDER BY Number_of_Orchestras DESC LIMIT 1
SELECT conductor.Name, COUNT(orchestra.Conductor_ID) AS Number_of_Orchestras FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name ORDER BY Number_of_Orchestras DESC LIMIT 1
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008
SELECT Record_Company, COUNT(Orchestra_ID) as Number_of_Orchestras FROM orchestra GROUP BY Record_Company
SELECT Record_Company, COUNT(Orchestra) as Number_of_Orchestras FROM orchestra GROUP BY Record_Company
SELECT Major_Record_Format, COUNT(*) as count FROM orchestra GROUP BY Major_Record_Format ORDER BY count ASC
SELECT Major_Record_Format, COUNT(Major_Record_Format) as frequency FROM orchestra GROUP BY Major_Record_Format ORDER BY frequency DESC
SELECT Record_Company, COUNT(Record_Company) as total_orchestras FROM orchestra GROUP BY Record_Company ORDER BY total_orchestras DESC LIMIT 1
SELECT Record_Company, COUNT(Orchestra_ID) as Orchestra_Count FROM orchestra GROUP BY Record_Company ORDER BY Orchestra_Count DESC LIMIT 1
SELECT Orchestra.Orchestra FROM Orchestra LEFT JOIN Performance ON Orchestra.Orchestra_ID = Performance.Orchestra_ID WHERE Performance.Performance_ID IS NULL
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
SELECT Record_Company  FROM orchestra  WHERE Year_of_Founded < 2003  INTERSECT  SELECT Record_Company  FROM orchestra  WHERE Year_of_Founded >= 2003
SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded >= 2003
SELECT count(*) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'
SELECT Year_of_Founded  FROM orchestra WHERE Orchestra_ID IN (   SELECT Orchestra_ID   FROM performance   GROUP BY Orchestra_ID   HAVING COUNT(Performance_ID) > 1 )
SELECT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING COUNT(Performance_ID) > 1)
SELECT COUNT(*) FROM Highschooler
SELECT COUNT(*) FROM Highschooler;
SELECT name, grade  FROM Highschooler
SELECT name, grade FROM Highschooler
SELECT grade FROM Highschooler
SELECT grade FROM Highschooler
SELECT grade FROM Highschooler WHERE name = 'Kyle'
SELECT grade FROM Highschooler WHERE name = 'Kyle'
SELECT name FROM Highschooler WHERE grade = 10;
SELECT name  FROM Highschooler  WHERE grade = 10
SELECT ID FROM Highschooler WHERE name='Kyle'
SELECT ID FROM Highschooler WHERE name = 'Kyle'
SELECT COUNT(*) FROM Highschooler WHERE grade = 9 OR grade = 10;
SELECT count(*) FROM Highschooler WHERE grade IN (9, 10)
SELECT grade, COUNT(ID) as number_of_highschoolers FROM Highschooler GROUP BY grade
SELECT grade, COUNT(ID) FROM Highschooler GROUP BY grade
SELECT grade, COUNT(ID) as count FROM Highschooler GROUP BY grade ORDER BY count DESC LIMIT 1
SELECT grade, COUNT(ID) as count FROM Highschooler GROUP BY grade ORDER BY count DESC LIMIT 1
SELECT grade, COUNT(*) as num_students FROM Highschooler GROUP BY grade HAVING num_students >= 4
SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4
SELECT student_id, COUNT(friend_id) as number_of_friends FROM Friend GROUP BY student_id ORDER BY number_of_friends DESC
SELECT Highschooler.ID, Highschooler.name, COUNT(Friend.friend_id) as number_of_friends FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID, Highschooler.name
SELECT Highschooler.name, COUNT(Friend.friend_id) as number_of_friends FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID ORDER BY number_of_friends DESC;
SELECT Highschooler.name, COUNT(Friend.student_id) AS num_friends FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name ORDER BY num_friends DESC
SELECT name FROM Highschooler WHERE ID = (SELECT student_id             FROM Friend             GROUP BY student_id             ORDER BY COUNT(friend_id) DESC             LIMIT 1);
SELECT Highschooler.name, COUNT(Friend.friend_id) AS number_of_friends FROM Highschooler INNER JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID ORDER BY number_of_friends DESC LIMIT 1
SELECT name FROM Highschooler WHERE ID IN (   SELECT student_id   FROM Friend   GROUP BY student_id   HAVING COUNT(friend_id) >= 3 )
SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(friend_id) >= 3);
SELECT name FROM Highschooler h JOIN Friend f ON h.ID = f.friend_id WHERE f.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT h2.name FROM Highschooler h1 JOIN Friend f ON h1.ID = f.student_id JOIN Highschooler h2 ON h2.ID = f.friend_id WHERE h1.name = 'Kyle'
SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle') OR friend_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT COUNT(friend_id) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT ID  FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT Highschooler.ID FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.friend_id IS NULL
SELECT name  FROM Highschooler  WHERE ID NOT IN (SELECT student_id                   FROM Friend)
SELECT name  FROM Highschooler  WHERE ID NOT IN (   SELECT friend_id    FROM Friend    WHERE student_id IN (     SELECT ID      FROM Highschooler   ) )
SELECT ID FROM Highschooler WHERE ID in (SELECT student_id FROM Friend) AND ID in (SELECT liked_id FROM Likes)
SELECT DISTINCT h.ID FROM Highschooler h JOIN Friend f ON h.ID = f.student_id JOIN Likes l ON h.ID = l.student_id
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID HAVING COUNT(Friend.friend_id) > 0 AND COUNT(Likes.liked_id) > 0
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name HAVING COUNT(Friend.friend_id) > 0 AND COUNT(Likes.liked_id) > 0
SELECT student_id, COUNT(liked_id) as likes_count FROM Likes GROUP BY student_id ORDER BY likes_count DESC;
SELECT student_id, count(liked_id) as likes_count FROM Likes GROUP BY student_id ORDER BY likes_count DESC;
SELECT Highschooler.name, COUNT(Likes.student_id) as num_likes FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID ORDER BY num_likes DESC
SELECT name, count(liked_id) as likes FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY name ORDER BY likes DESC
SELECT name FROM Highschooler WHERE ID = (SELECT liked_id             FROM Likes             GROUP BY liked_id             ORDER BY COUNT(student_id) DESC             LIMIT 1)
SELECT Highschooler.name, COUNT(Likes.student_id) as likes FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id GROUP BY Highschooler.ID ORDER BY likes DESC LIMIT 1
SELECT h.name FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.ID HAVING COUNT(l.liked_id) >= 2
SELECT name FROM Highschooler WHERE ID in (   SELECT student_id   FROM Likes   GROUP BY student_id   HAVING COUNT(*) >= 2 )
SELECT name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id WHERE grade > 5 GROUP BY h.ID HAVING COUNT(f.friend_id) >= 2
SELECT name FROM Highschooler WHERE grade > 5 AND ID IN (   SELECT student_id   FROM Friend   GROUP BY student_id   HAVING COUNT(friend_id) >= 2 )
SELECT COUNT(*) FROM Likes WHERE liked_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend)
SELECT AVG(h.grade) FROM Highschooler h JOIN Friend f ON h.ID = f.student_id OR h.ID = f.friend_id GROUP BY h.ID HAVING COUNT(DISTINCT f.student_id) > 0
SELECT MIN(grade)  FROM Highschooler  WHERE ID NOT IN (SELECT friend_id FROM Friend WHERE student_id = ID)
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT state FROM (   SELECT state, 'owner' AS type   FROM Owners   UNION   SELECT state, 'professional' AS type   FROM Professionals ) AS combined GROUP BY state HAVING COUNT(DISTINCT type) = 2
SELECT state FROM Owners WHERE state IN (SELECT state FROM Professionals) GROUP BY state
SELECT AVG(age) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id
SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (     SELECT professional_id     FROM Treatments     GROUP BY professional_id     HAVING COUNT(*) > 2 )
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR  (professional_id IN (SELECT professional_id  FROM Treatments  GROUP BY professional_id  HAVING COUNT(treatment_id) > 2));
SELECT D.name FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id WHERE T.cost_of_treatment <= 1000 GROUP BY D.name
SELECT name  FROM Dogs  WHERE dog_id NOT IN (   SELECT dog_id    FROM Treatments    WHERE cost_of_treatment > 1000 )
SELECT first_name FROM (   SELECT first_name FROM Owners   UNION   SELECT first_name FROM Professionals ) AS all_first_names WHERE first_name NOT IN (   SELECT name FROM Dogs )
SELECT first_name FROM (   SELECT first_name   FROM Owners   UNION   SELECT first_name   FROM Professionals ) AS all_first_names WHERE first_name NOT IN (   SELECT name   FROM Dogs )
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT Owners.owner_id, first_name, last_name, COUNT(dog_id) as dog_count FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id, first_name, last_name ORDER BY dog_count DESC LIMIT 1
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners WHERE Owners.owner_id = (SELECT owner_id FROM Dogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1)
SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(*) >= 2 ) ORDER BY professional_id
SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (   SELECT professional_id    FROM Treatments   GROUP BY professional_id   HAVING COUNT(treatment_id) >= 2 )
SELECT Breeds.breed_name, COUNT(Dogs.dog_id) as num_dogs FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY Breeds.breed_name ORDER BY num_dogs DESC LIMIT 1
SELECT Breeds.breed_name, COUNT(Dogs.dog_id) as breed_count FROM Breeds INNER JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY Breeds.breed_name ORDER BY breed_count DESC LIMIT 1
SELECT Owners.owner_id, last_name, SUM(cost_of_treatment) as total_cost FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id, last_name ORDER BY total_cost DESC LIMIT 1
SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id, Owners.last_name ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1
SELECT treatment_type_description  FROM Treatment_Types  JOIN Treatments ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code  GROUP BY treatment_type_description  ORDER BY SUM(cost_of_treatment) ASC  LIMIT 1;
SELECT treatment_type_description  FROM Treatment_Types  WHERE treatment_type_code = (SELECT treatment_type_code  FROM Treatments  GROUP BY treatment_type_code  ORDER BY SUM(cost_of_treatment)  LIMIT 1)
SELECT Owners.owner_id, Owners.zip_code, SUM(Charges.charge_amount) AS total_amount FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id JOIN Charges ON Treatments.treatment_id = Charges.charge_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY total_amount DESC LIMIT 1
SELECT Owners.owner_id, Owners.zip_code, SUM(Treatments.cost_of_treatment) as total_cost FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY total_cost DESC LIMIT 1
SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(DISTINCT treatment_type_code) >= 2 )
SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(DISTINCT treatment_type_code) >= 2 )
SELECT first_name, last_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)
SELECT first_name, last_name FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments) )
SELECT date_of_treatment, first_name FROM Treatments  JOIN Professionals ON Treatments.professional_id = Professionals.professional_id
SELECT date_of_treatment, Professionals.first_name  FROM Treatments  JOIN Professionals  ON Treatments.professional_id = Professionals.professional_id
SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code
SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code
SELECT Owners.first_name, Owners.last_name, Sizes.size_description  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id  JOIN Sizes ON Dogs.size_code = Sizes.size_code
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id
SELECT Owners.first_name, Dogs.name  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id
SELECT D.name, T.date_of_treatment FROM Dogs D JOIN Breeds B ON D.breed_code = B.breed_code JOIN Treatments T ON D.dog_id = T.dog_id WHERE B.breed_code = (SELECT breed_code FROM Breeds ORDER BY breed_code LIMIT 1)
SELECT D.name, T.date_of_treatment, B.breed_name FROM Dogs D JOIN Breeds B ON D.breed_code = B.breed_code JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY B.breed_name ORDER BY COUNT(D.dog_id) DESC LIMIT 1
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'Virginia'
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'Virginia'
SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id
SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id
SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id ORDER BY Dogs.date_of_birth DESC LIMIT 1
SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.date_of_birth = (SELECT MIN(Dogs.date_of_birth) FROM Dogs)
SELECT email_address  FROM Professionals  WHERE state = 'Hawaii' OR state = 'Wisconsin'
SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'
SELECT date_arrived, date_departed  FROM Dogs
SELECT date_arrived, date_departed FROM Dogs
SELECT COUNT(DISTINCT dog_id) FROM Treatments
SELECT COUNT(DISTINCT dog_id) FROM Treatments
SELECT COUNT(DISTINCT professional_id) FROM Treatments
SELECT COUNT(DISTINCT professional_id) FROM Treatments
SELECT role_code, street, city, state  FROM Professionals  WHERE city LIKE '%West%'
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT COUNT(*)  FROM Dogs  WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT cost_of_treatment  FROM Treatments  ORDER BY date_of_treatment DESC  LIMIT 1
SELECT MAX(date_of_treatment), cost_of_treatment  FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
SELECT COUNT(D.dog_id) FROM Dogs D LEFT JOIN Treatments T ON D.dog_id = T.dog_id WHERE T.treatment_id IS NULL
SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)
SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs)
SELECT COUNT(*)  FROM Owners  WHERE owner_id NOT IN (SELECT owner_id FROM Dogs);
SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = '1'
SELECT name, age, weight  FROM Dogs  WHERE abandoned_yn = '1'
SELECT AVG(age) FROM Dogs
SELECT AVG(age) FROM Dogs
SELECT MAX(age)  FROM Dogs
SELECT MAX(date_of_birth) AS oldest_dog_dob  FROM Dogs  WHERE date_of_birth IS NOT NULL
SELECT charge_type, charge_amount FROM Charges
SELECT charge_type, charge_amount FROM Charges
SELECT MAX(charge_amount)  FROM Charges
SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1;
SELECT email_address, cell_number, home_phone FROM Professionals
SELECT email_address, home_phone, cell_number FROM Professionals
SELECT Breeds.breed_name, Sizes.size_description FROM Breeds JOIN Sizes ON Breeds.breed_code = Sizes.size_code
SELECT DISTINCT Breeds.breed_name, Sizes.size_description FROM Breeds INNER JOIN Dogs ON Breeds.breed_code = Dogs.breed_code INNER JOIN Sizes ON Sizes.size_code = Dogs.size_code
SELECT first_name, treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code
SELECT    Professionals.first_name,    Treatment_Types.treatment_type_description  FROM    Professionals    JOIN Treatments ON Professionals.professional_id = Treatments.professional_id    JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code
SELECT COUNT(*) FROM singer
SELECT COUNT(*) FROM singer
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
SELECT Birth_Year, Citizenship FROM singer
SELECT Birth_Year, Citizenship FROM singer
SELECT Name FROM singer WHERE Citizenship != 'France'
SELECT Name FROM singer WHERE Citizenship != 'French'
SELECT Name  FROM singer  WHERE Birth_Year in (1948, 1949)
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;
SELECT Citizenship, COUNT(*) as Number_of_Singers FROM singer GROUP BY Citizenship
SELECT Citizenship, COUNT(Citizenship) as Number_of_Singers FROM singer GROUP BY Citizenship
SELECT Citizenship, COUNT(Citizenship) FROM singer GROUP BY Citizenship ORDER BY COUNT(Citizenship) DESC LIMIT 1
SELECT Citizenship, COUNT(*) as Total_Singers FROM singer GROUP BY Citizenship ORDER BY Total_Singers DESC LIMIT 1;
SELECT Citizenship, MAX(Net_Worth_Millions) as Max_Net_Worth FROM singer GROUP BY Citizenship
SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID
SELECT DISTINCT name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song WHERE Sales > 300000)
SELECT Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000 GROUP BY Name
SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(*) > 1)
SELECT s.Name FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Name HAVING COUNT(so.Song_ID) > 1
SELECT singer.Name, SUM(song.Sales) as Total_Sales FROM singer INNER JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name ORDER BY Total_Sales DESC
SELECT Name, SUM(Sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY Name
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
SELECT s.Name FROM singer s LEFT JOIN song ON s.Singer_ID = song.Singer_ID WHERE song.Song_ID IS NULL
SELECT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955 GROUP BY Citizenship
SELECT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955 GROUP BY Citizenship HAVING COUNT(*) > 1
SELECT COUNT(*) FROM Other_Available_Features
SELECT Ref_Feature_Types.feature_type_name FROM Ref_Feature_Types JOIN Other_Available_Features ON Ref_Feature_Types.feature_type_code = Other_Available_Features.feature_type_code WHERE Other_Available_Features.feature_name = 'AirCon'
SELECT Ref_Property_Types.property_type_description FROM Ref_Property_Types INNER JOIN Properties ON Ref_Property_Types.property_type_code = Properties.property_type_code
SELECT property_name FROM Properties WHERE (property_type_code = 'hse' OR property_type_code = 'apt') AND room_count > 1
